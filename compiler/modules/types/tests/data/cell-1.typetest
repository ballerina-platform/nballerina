(assert= int int)
(let ((cell-a (cell int none))
      (cell-b (cell int none)))
     (assert= cell-a cell-b))
(let ((cell-a (cell int limited))
      (cell-b (cell int limited)))
     (assert= cell-a cell-b))
(let ((cell-a (cell int unlimited))
      (cell-b (cell int unlimited)))
     (assert= cell-a cell-b))

(assert= boolean boolean)
(let ((cell-a (cell (| int boolean) none))
      (cell-b (cell (| int boolean) none)))
     (assert= cell-a cell-b))
(let ((cell-a (cell (| int boolean) limited))
      (cell-b (cell (| int boolean) limited)))
     (assert= cell-a cell-b))
(let ((cell-a (cell (| int boolean) unlimited))
      (cell-b (cell (| int boolean) unlimited)))
     (assert= cell-a cell-b))

(assert< (int-range 0 255) int)
(let ((cell-a (cell (int-range 0 255) none))
      (cell-b (cell int none)))
     (assert< cell-a cell-b))
(let ((cell-a (cell (int-range 0 255) limited))
      (cell-b (cell int limited)))
     (assert< cell-a cell-b))
(let ((cell-a (cell (int-range 0 255) unlimited))
      (cell-b (cell int unlimited)))
     (assert< cell-a cell-b))     

(assert<> boolean int)
(let ((cell-a (cell boolean none))
      (cell-b (cell int none)))
     (assert<> cell-a cell-b))
(let ((cell-a (cell boolean limited))
      (cell-b (cell int limited)))
     (assert<> cell-a cell-b))
(let ((cell-a (cell boolean unlimited))
      (cell-b (cell int unlimited)))
     (assert<> cell-a cell-b))

(assert= (| int boolean) (| int boolean))
(let ((int-cell (cell int none))
      (boolean-cell (cell boolean none))
      (int-or-boolean-cell (cell (| int boolean) none)))
     (assert= (| int-cell boolean-cell) int-or-boolean-cell))
(let ((int-cell (cell int limited))
      (boolean-cell (cell boolean limited))
      (int-or-boolean-cell (cell (| int boolean) limited)))
     (assert< (| int-cell boolean-cell) int-or-boolean-cell))
(let ((int-cell (cell int unlimited))
      (boolean-cell (cell boolean unlimited))
      (int-or-boolean-cell (cell (| int boolean) unlimited)))
     (assert= (| int-cell boolean-cell) int-or-boolean-cell))

(assert= (| int boolean string) (| int boolean string))
(let ((int-cell (cell int none))
      (boolean-cell (cell boolean none))
      (string-cell (cell string none))
      (int-boolean-or-string-cell (cell (| int boolean string) none)))
     (assert= (| int-cell boolean-cell string-cell) int-boolean-or-string-cell))
(let ((int-cell (cell int limited))
      (boolean-cell (cell boolean limited))
      (string-cell (cell string limited))
      (int-boolean-or-string-cell (cell (| int boolean string) limited)))
     (assert< (| int-cell boolean-cell string-cell) int-boolean-or-string-cell))
(let ((int-cell (cell int unlimited))
      (boolean-cell (cell boolean unlimited))
      (string-cell (cell string unlimited))
      (int-boolean-or-string-cell (cell (| int boolean string) unlimited)))
     (assert= (| int-cell boolean-cell string-cell) int-boolean-or-string-cell))

(let ((cell (cell int none)))
     (assert<> cell int))
(let ((cell (cell int limited)))
     (assert<> cell int))
(let ((cell (cell int unlimited)))
     (assert<> cell int))
