[
    ["E", "expr", ""],
    { "comment" : "not lexical errors" },
    { "comment" : "`0` is valid token so tokenization will succeed" },
    ["E", "expr", "00"],
    ["E", "expr", "01"],
    ["E", "expr", "-01"],
    ["E", "expr", "0x"],
    { "comment" : "tokenizes as two dots" },
    ["E", "expr", "obj..x(args)"],

    { "comment" : "literals" },
    ["V", "expr", "0"],
    ["V", "expr", "1"],
    ["V", "expr", "0x1"],
    { "comment" : "not semantically valid" },
    ["V", "expr", "0x8000000000000000"],
    ["V", "expr", "-0x8000000000000000"],
    ["V", "expr", "-0x10"],
    ["V", "expr", "()"],
    ["V", "expr", "null", "()"],
    ["V", "expr", "-()"],
    ["V", "expr", "-true"],
    ["V", "expr", "9223372036854775807"],
    { "comment" : "not semantically valid" },
    ["V", "expr", "9223372036854775808"],
    ["V", "expr", "true"],
    ["V", "expr", "false"],
    ["V", "expr", "\n0", "0"],
    ["V", "expr", "\r0", "0"],
    ["V", "expr", "\r\n0", "0"],
    ["V", "expr", "1.0"],
    ["V", "expr", "100000000000000000000000000000.0"],
    ["V", "expr", "10.0e10000000"],
    ["V", "expr", "-1E1F", "-1E1f"],
    ["V", "expr", "-1E1D", "-1E1d"],
    ["V", "expr", "1E+12d", "1E+12d"],

    { "comment" : "literals string" },
    ["V", "expr", "\"what\""],
    ["V", "expr", "\"Say \\\"what\\\" again.\""],

    { "comment" : "literals string escape" },
    ["V", "expr", "\"\t\"", "\"\\t\""],
    ["V", "expr", "\"\\t\""],
    ["V", "expr", "\"\\n\""],
    ["V", "expr", "\"\\r\""],
    ["V", "expr", "\"\\\\\""],
    ["V", "expr", "\"\\\"\""],
    ["V", "expr", "\"\\u{0}\""],
    ["V", "expr", "\"\\u{41}\"", "\"A\""],
    ["V", "expr", "\"\\u{6A}\"", "\"j\""],
    ["V", "expr", "\"\\u{6a}\"", "\"j\""],
    ["V", "expr", "\"\\u{0000000041}\"", "\"A\""],
    ["V", "expr", "\"\\u{d7fF}\"", "\"\\u{D7FF}\""],
    ["V", "expr", "\"\\u{E000}\""],
    ["V", "expr", "\"\\u{FFFE}\""],
    ["V", "expr", "\"\\u{FFFF}\""],
    ["V", "expr", "\"\\u{10FFFF}\""],
    ["V", "expr", "\"\\\\u{41}\""],

    { "comment" : "var ref" },
    ["V", "expr", "a:b"],
    ["E", "expr", "a:1", ""],

    { "comment" : "unary op" },
    ["E", "expr", "!", ""],
    ["E", "expr", "!-", ""],
    ["V", "expr", "-1"],
    ["V", "expr", "!1"],
    ["V", "expr", "!true"],
    ["E", "expr", "1+", ""],
    ["E", "expr", "*1", "1"],
    ["V", "expr", "--1", "-(-1)"],
    ["V", "expr", "!!!true", "!(!(!true))"],
    ["V", "expr", "a--b", "a - (-b)"],
    ["V", "expr", "~true"],
    ["V", "expr", "-~-x", "-(~(-x))"],
    ["V", "expr", "x-~y", "x - (~y)"],
    ["V", "expr", "~x-y", "(~x) - y"],
    ["V", "expr", "~x[i]", "~(x[i])"],

    { "comment" : "type cast" },
    ["V", "expr", "<int>x"],
    ["V", "expr", "< boolean > x", "<boolean>x"],
    ["V", "expr", "<int>x + <int>y", "(<int>x) + (<int>y)"],
    ["V", "expr", "<int><any>x", "<int>(<any>x)"],
    ["E", "expr", "<>x", ""],
    ["V", "expr", "1 < <int>2", "1 < (<int>2)"],
    ["E", "expr", "1 <<int> 2", ""],
    ["V", "expr", "<any[]>x"],
    ["V", "expr", "<map<any>>x"],

    { "comment" : "type test" },
    ["V", "expr", "x is int"],
    ["V", "expr", "x !is int", "x !is int"],
    ["V", "expr", "x[1] is map<any>", "(x[1]) is map<any>"],
    ["V", "expr", "x is int == true", "(x is int) == true"],
    ["V", "expr", "v is a:b"],

    { "comment" : "binary op" },
    ["V", "expr", "1 + 1"],
    ["V", "expr", "2 - a2"],
    ["V", "expr", "a3 * a3"],
    ["V", "expr", "4 % 4"],
    ["V", "expr", "4 == 4"],
    ["V", "expr", "4 != 4"],
    ["V", "expr", "1 === 2"],
    ["V", "expr", "1 !== 2"],
    ["V", "expr", "x ===4", "x === 4"],
    ["V", "expr", "y!== 4", "y !== 4"],
    ["V", "expr", "5 < 4"],
    ["V", "expr", "4 <= 4"],
    ["V", "expr", "4 > 4"],
    ["V", "expr", "4 >= 4"],
    ["V", "expr", "a +\n b", "a + b"],
    ["V", "expr", "a +\r b", "a + b"],
    ["V", "expr", "a +\r\n b", "a + b"],
    ["V", "expr", "a +\n\r b", "a + b"],
    ["V", "expr", "a >> b"],
    ["V", "expr", "<int>a >> <int>b", "(<int>a) >> (<int>b)"],
    ["V", "expr", "a <<<int>b", "a << (<int>b)"],
    ["V", "expr", "<map<int>>a"],
    ["V", "expr", "a << b"],
    ["V", "expr", "a >>> b"],
    ["E", "expr", "a <<< b"],
    ["E", "expr", "a >>>> b"],
    ["V", "expr", "a | b"],
    ["V", "expr", "a & b"],
    ["V", "expr", "a ^ b"],

    { "comment" : "binary op associativity" },
    ["V", "expr", "1 + 2 + 3", "(1 + 2) + 3"],
    ["V", "expr", "1 + 2 + 3 + 4", "((1 + 2) + 3) + 4"],
    ["V", "expr", "(1 + 2) + 3"],
    ["V", "expr", "1 + (2 + 3)"],
    ["V", "expr", "1 - 2 - 3", "(1 - 2) - 3"],
    ["V", "expr", "1 * 2 * 3", "(1 * 2) * 3"],
    ["V", "expr", "1 % 2 % 3", "(1 % 2) % 3"],
    ["V", "expr", "1 - 2 + 3", "(1 - 2) + 3"],
    ["V", "expr", "a >> b >> c", "(a >> b) >> c"],
    ["V", "expr", "a << b << c", "(a << b) << c"],
    ["V", "expr", "a >> b << c", "(a >> b) << c"],
    ["V", "expr", "a << b >> c", "(a << b) >> c"],
    ["V", "expr", "a >>> b >>> c", "(a >>> b) >>> c"],
    ["V", "expr", "a >> b >>> c", "(a >> b) >>> c"],
    ["V", "expr", "a << b >>> c", "(a << b) >>> c"],
    ["V", "expr", "a >>> b >> c", "(a >>> b) >> c"],
    ["V", "expr", "a >>> b << c", "(a >>> b) << c"],
    ["V", "expr", "1 <<x> 3", "(1 << x) > 3"],
    ["V", "expr", "a | b | c", "(a | b) | c"],
    ["V", "expr", "a | (b | c)"],
    ["V", "expr", "a & b & c", "(a & b) & c"],
    ["V", "expr", "a & (b & c)"],
    ["V", "expr", "a ^ b ^ c", "(a ^ b) ^ c"],
    ["V", "expr", "a ^ (b ^ c)"],
    ["V", "expr", "1--1", "1 - (-1)"],
    ["V", "expr", "1+-1", "1 + (-1)"],
    ["E", "expr", "1-+1", ""],
    ["V", "expr", "x+1===y-3", "(x + 1) === (y - 3)"],
    ["V", "expr", "x*1!=y/3", "(x * 1) != (y / 3)"],

    { "comment" : "binary op precedence" },
    ["V", "expr", "(1 * 2) + 3"],
    ["V", "expr", "1 + 2 * 3", "1 + (2 * 3)"],
    ["V", "expr", "1 + (2 * 3)"],
    ["V", "expr", "a + b & c", "(a + b) & c"],
    ["V", "expr", "a & b + c", "a & (b + c)"],
    ["V", "expr", "a == b + c", "a == (b + c)"],
    ["V", "expr", "(a + b) == c"],
    ["V", "expr", "a > b >> c", "a > (b >> c)"],
    ["V", "expr", "a >> b + c", "a >> (b + c)"],
    ["V", "expr", "a == b >>> c", "a == (b >>> c)"],
    ["V", "expr", "a >>> b - c", "a >>> (b - c)"],
    ["V", "expr", "a & b << c", "a & (b << c)"],
    ["V", "expr", "a << b * c", "a << (b * c)"],
    ["V", "expr", "a == b & c", "(a == b) & c"],
    ["V", "expr", "a & b == c", "a & (b == c)"],
    ["V", "expr", "a & b | c", "(a & b) | c"],
    ["V", "expr", "a | b & c", "a | (b & c)"],
    ["V", "expr", "a ^ b | c", "(a ^ b) | c"],
    ["V", "expr", "a | b ^ c", "a | (b ^ c)"],
    ["V", "expr", "a ^ b & c", "a ^ (b & c)"],
    ["V", "expr", "a & b ^ c", "(a & b) ^ c"],

    { "comment" : "logical expression" },
    ["V", "expr", "a && b"],
    ["V", "expr", "a || b"],
    ["V", "expr", "a || b || c", "(a || b) || c"],
    ["V", "expr", "a && b && c", "(a && b) && c"],
    ["V", "expr", "a || b && c", "a || (b && c)"],

    { "comment" : "ref" },
    ["V", "expr", "x"],
    ["V", "expr", "x1"],
    ["V", "expr", "x1a"],
    ["V", "expr", "truefalse"],

    { "comment" : "call" },
    ["V", "expr", "x()"],
    ["V", "expr", "x(a)"],
    ["V", "expr", "x(a, b)"],
    ["E", "expr", "x(,)", ""],
    ["E", "expr", "x(a,)", ""],
    ["E", "expr", "x(a b)", ""],
    ["V", "expr", "xxx(123, 12 + 2)"],
    ["V", "expr", "x:f()"],
    ["V", "expr", "a:b().x()"],
    ["V", "expr", "x:y.f()"],

    { "comment" : "list constructor" },
    ["V", "expr", "[ ]", "[]"],
    ["V", "expr", "[foo(42)]"],
    ["V", "expr", "[1,a,true ]", "[1, a, true]"],
    ["V", "expr", "[ [] ]", "[[]]"],
    ["V", "expr", "[ [1,2],[3,4] ]", "[[1, 2], [3, 4]]"],
    ["E", "expr", "[1)", ""],
    ["E", "expr", "[1 2]", ""],
    ["E", "expr", "[1,]", ""],
    ["E", "expr", "[,1]", ""],

    { "comment" : "mapping constructor" },
    ["V", "expr", "{ }"],
    ["V", "expr", "{x: 1, y: 2}", "{ x: 1, y: 2 }"],
    ["V", "expr", "{x: 1, y: 2, \"z\": 3}", "{ x: 1, y: 2, \"z\": 3 }"],
    ["V", "expr", "{value: 1+2}", "{ value: 1 + 2 }"],

    { "comment" : "method call" },
    ["V", "expr", "obj.x(1)"],
    ["V", "expr", "(x+y).length()", "(x + y).length()"],
    ["V", "expr", "x+y.length()", "x + (y.length())"],
    ["V", "expr", "().length()"],
    ["V", "expr", "null.length()", "().length()"],
    ["V", "expr", "true.length()"],
    ["V", "expr", "false.length()"],
    ["V", "expr", "-1.hexStr()", "-(1.hexStr())"],
    ["V", "expr", "-0xf.max()", "-(0xf.max())"],
    ["V", "expr", "x.map()"],
    ["V", "expr", "x.map(arr)"],
    ["V", "expr", "x.a.map()", "(x.a).map()"],
    ["V", "expr", "x.a.b.map()", "((x.a).b).map()"],
    ["V", "expr", "x[1].map()", "(x[1]).map()"],
    ["V", "expr", "x.y[z].map()", "((x.y)[z]).map()"],
    ["V", "stmt", "x.map();"],

    { "comment" : "field access" },
    ["V", "expr", "a.b"],
    ["V", "expr", "a.b.c", "(a.b).c"],
    ["V", "expr", "a.b().c", "(a.b()).c"],
    ["V", "expr", "a.b.c()", "(a.b).c()"],
    ["V", "expr", "a[n].b.c(m)", "((a[n]).b).c(m)"],
    ["V", "expr", "a(x).b.c[y]", "((a(x).b).c)[y]"],
    ["V", "expr", "a[b.c]"],
    ["E", "expr", "a.1", ""],
    { "comment" : "may get allowed under  ballerina-spec#34" },
    ["E", "expr", "a.map", ""],
    { "comment" : "XXX Output is illegal in 2021R1 but will be addressed in ballerina-spec#905" },
    ["V", "expr", "42 .length()", "42.length()"],
    ["V", "expr", "x.foo().bar()", "(x.foo()).bar()"],
    ["V", "expr", "x.foo()[n].bar()", "((x.foo())[n]).bar()"],
    ["E", "expr", "obj.(1)", ""],

    { "comment" : "member access" },
    ["V", "expr", "a [ 2 ]", "a[2]"],
    ["V", "expr", "v [ i + 1 ]", "v[i + 1]"],
    ["V", "expr", "a[m][n]", "(a[m])[n]"],
    ["V", "expr", "a[i]+b[j]", "(a[i]) + (b[j])"],

    { "comment" : "paren" },
    ["V", "expr", "(0)", "0"],
    ["V", "expr", "( 1 )", "1"],
    ["V", "expr", "( -2 )", "-2"],
    ["V", "expr", "(( 1 ))", "1"],
    ["V", "expr", "(true)", "true"],
    ["E", "expr", "(", ""],
    ["E", "expr", ")", ""],
    ["E", "expr", "(1", ""],
    ["V", "expr", "(v)", "v"],
    ["E", "expr", "(1+)", ""],
    ["V", "expr", "(f())", "f()"],
    ["E", "expr", "(f()())", ""],
    ["V", "expr", "(((x)))", "x"],

    { "comment" : "typedesc" },
    ["V", "td", "int[]"],
    ["V", "td", "a|b", "a | b"],
    ["V", "td", "a|b[]", "a | (b[])"],
    ["V", "td", "(a|b)[]", "(a | b)[]"],
    ["V", "td", "map<int>", "map<int>"],
    ["V", "td", "function ()"],
    ["V", "td", "function"],
    ["V", "td", "function (int a)"],
    ["V", "td", "function (int a) returns boolean"],
    ["V", "td", "function (int) returns boolean"],
    ["V", "td", "function (int, int) returns boolean"],
    ["E", "td", "function (int a) returns boolean b"],
    ["V", "td", "function (int a, int b) returns boolean"],

    { "comment" : "statement" },
    ["E", "stmt", ";", ""],
    ["E", "stmt", "1;", ""],
    ["E", "stmt", "--a;", ""],
    ["E", "stmt", "a + b;", ""],
    ["V", "stmt", "break;"],
    ["V", "stmt", "continue;"],
    ["V", "stmt", "a:x(c,d);", "a:x(c, d);"],
    ["V", "stmt", "obj.x(c,d);", "obj.x(c, d);"],
    ["V", "stmt", "foo().bar(c,d);", "foo().bar(c, d);"],
    { "comment" : "not semantically valid" },
    ["V", "stmt", "true.ok();"],
    ["V", "stmt", "null.ok();", "().ok();"],
    ["V", "stmt", "().ok();"],
    ["V", "stmt", "(x|y).ok();", "(x | y).ok();"],
    ["V", "stmt", "foo()[0].push(1);", "(foo()[0]).push(1);"],
    ["V", "stmt", "foo[1].push(2);", "(foo[1]).push(2);"],
    ["V", "stmt", "foo[1].x.push(2);", "((foo[1]).x).push(2);"],
    ["V", "stmt", "x.y.push(2);", "(x.y).push(2);"],
    ["V", "stmt", "x.y[1].push(z);", "((x.y)[1]).push(z);"],
    ["E", "stmt", "foo.push(1)[0];", ""],
    ["E", "stmt", "foo[0];", ""],
    ["V", "stmt", "x = a >> b;"],
    ["E", "expr", "string w = \"Say \"what\" one more time.\";", ""],

    { "comment" : "statement identifier typedesc" },
    ["V", "stmt", "A|string a = 1;", "A | string a = 1;"],
    ["V", "stmt", "A:B|int a = 1;", "A:B | int a = 1;"],
    ["V", "stmt", "A|B x = 1;", "A | B x = 1;"],
    ["V", "stmt", "A|B|C x = f();", "A | B | C x = f();"],
    ["V", "stmt", "A|() x = 2.3;", "A | () x = 2.3;"],
    ["V", "stmt", "A? x = 2.3;"],
    ["V", "stmt", "A? x = ();"],
    ["V", "stmt", "A?|B x = ();", "A? | B x = ();"],
    ["V", "stmt", "A?[]|B? x = ();", "(A?[]) | B? x = ();"],
    ["V", "stmt", "A:A|B:B y = r;", "A:A | B:B y = r;"],
    ["V", "stmt", "A:A?|B y = r;", "A:A? | B y = r;"],
    ["V", "stmt", "A|B:C? y = r;", "A | B:C? y = r;"],
    ["E", "stmt", "A|? x = y;"],
    ["V", "stmt", "()|A x = 2.3;", "() | A x = 2.3;"],
    ["V", "stmt", "A? x = 2.4;"],
    ["V", "stmt", "B[] x = [];"],
    ["V", "stmt", "X:Y[] x = [];"],
    ["V", "stmt", "A&B|C&D x = 1;", "(A & B) | (C & D) x = 1;"],
    
    { "comment" : "statement literal typedesc" },
    ["V", "stmt", "\"abc\" s = \"abc\";"],
    ["V", "stmt", "true TRUE = true;"],
    ["V", "stmt", "false FALSE = false;"],
    ["V", "stmt", "1 X = 1;"],
    ["V", "stmt", "1.0 X = 1.0;"],
    ["V", "stmt", "0xF X = 0xF;"],
    ["V", "stmt", "(true) t = true;", "true t = true;"],
    ["V", "stmt", "false | true B = false;"],
    ["V", "stmt", "false & true B = ();"],
    ["V", "stmt", "5? I = 5;"],
    ["V", "stmt", "5[] I = [5];"],
    ["V", "stmt", "-1 x = -1;"],
    ["V", "stmt", "-1.5 x = -1.5;"],
    ["V", "stmt", "-12 | -1.5 x = -12;"],
    ["V", "stmt", "-15 & -1.5 x = ();"],
    ["V", "stmt", "-5? x = -5;"],
    ["V", "stmt", "-12[] x = [-12, -12];"],
    ["V", "stmt", "-1.5[] x = [-1.5, -1.5];"],
    ["V", "stmt", "(-1) x = -1;", "-1 x = -1;"],

    { "comment" : "statement return" },
    ["V", "stmt", "return;"],
    ["V", "stmt", "return ok;"],
    ["E", "stmt", "return a, b;"],

    { "comment" : "statement var decl" },
    ["E", "stmt", "int 1i = 0;", ""],
    ["E", "stmt", "int i = 1(-1);", ""],
    ["E", "stmt", "int i = (-1)1;", ""],
    ["E", "stmt", "int i = 1 2;", ""],
    ["E", "stmt", "(int i = 10);", ""],
    ["V", "stmt", "int x = a != b;"],
    ["E", "stmt", "int i = {}", ""],
    ["E", "stmt", "int x = a =! b;", ""],
    ["E", "stmt", "int i = 0xBABE1F1SH;", ""],
    ["V", "stmt", "int i = 10;"],
    ["V", "stmt", "a:b i = 10;"],
    ["V", "stmt", "boolean i = 10;"],
    ["E", "stmt", "int i = a ... b ... c;", ""],
    ["V", "stmt", "final int i = 1;"],
    ["V", "stmt", "boolean b = false;"],
    ["V", "stmt", "any v = false;"],
    ["V", "stmt", "any v = 1;"],
    ["V", "stmt", "any [ ] v = [1];", "any[] v = [1];"],
    ["V", "stmt", "any [x ] v = [1];", "any[x] v = [1];"],
    ["V", "stmt", "any [2] v = [1];", "any[2] v = [1];"],
    ["V", "stmt", "map<any> v = {x:1};", "map<any> v = { x: 1 };"],
    ["V", "stmt", "a:b();"],
    ["V", "stmt", "a:b().x();"],
    ["V", "stmt", "a:b((j), k).x();", "a:b(j, k).x();"],
    ["V", "stmt", "a:b.m();"],
    ["V", "stmt", "error e = error(\"\");"],
    ["V", "stmt", "decimal d = 2;"],
    ["V", "stmt", "decimal d = 2d;"],
    ["V", "stmt", "decimal d = 1E+12d;"],
    ["V", "stmt", "byte i = 10;"],
    ["V", "stmt", "byte[] i = [10];"],
    ["V", "stmt", "T[2] n = [2, 1.5];"],
    ["V", "stmt", "T[x] n = [2, 1.5];"],
    ["V", "stmt", "int[x] n = [2, 1];"],
    ["V", "stmt", "int[1] n = [3];"],
    ["V", "stmt", "int[3] n = [2, 1, 7];"],
    ["V", "stmt", "int[0x3] n = [2, 1, 7];"],
    ["V", "stmt", "(int|boolean)[3] n = [2, true, 7];", "(int | boolean)[3] n = [2, true, 7];"],
    ["V", "stmt", "int|boolean[2] n = [2, [true, false]];", "int | (boolean[2]) n = [2, [true, false]];"],
    ["V", "stmt", "3[2] n = [2, 2, 2];"],
    ["V", "stmt", "int[][2] n = [[1], [3, 4, 5]];"],
    ["V", "stmt", "int[2][] n = [[1, 2], [3, 4], [5, 6]];"],
    ["V", "stmt", "int[1][][2] n = [[[1], [2], [3]], [[3], [4]]];"],
    ["E", "stmt", "T[1 + 1] n = [2, 1.5];"],
    ["E", "stmt", "T[foo()] n = [2, 1.5];"],
    ["E", "stmt", "T[\"ab\".length()] n = [2, 1.5];"],
    ["E", "stmt", "T[x[2]] n = [2, 1.5];"],
    ["E", "stmt", "T[2 n = [2, 1.5];"],
    ["E", "stmt", "T2] n = [2, 1.5];"],
    ["E", "stmt", "T[][2 n = [2, 1.5];"],
    ["E", "stmt", "T[(2)] n = [2, 2];"],
    ["V", "stmt", "[int, [int, int], int] T = [1, [2, 3], 4];"],
    ["V", "stmt", "[T1, [T2, T3]] T = [1, [x, \"3\"]];"],
    ["E", "stmt", "[int, string T = [2, \"test\"];"],
    ["E", "stmt", "int, string] T = [2, \"test\"];"],
    ["E", "stmt", "[int, string] T = [2, \"test\";"],
    ["E", "stmt", "[int..., string] T = [2, \"test\";"],
    ["E", "stmt", "T[\"2\"] n = [2, 1.5];"],
    ["E", "stmt", "T[()] n = [2, 2, 2];"],
    ["E", "stmt", "T[2.0] n = [2, 2];"],
    ["E", "stmt", "T[-2] n = [2, 2];"],

    { "comment" : "statement var decl wildcard" },
    ["V", "stmt", "Int | String _ = x;"],
    ["V", "stmt", "XYZ? _ = x;"],
    ["V", "stmt", "T_1 & T_2 _ = x;"],
    ["V", "stmt", "map<T> _ = { k: x };"],
    ["V", "stmt", "T[] _ = [x];"],
    ["E", "stmt", "_ _ = x;"],

    { "comment" : "statement method call" },
    { "comment" : "not semantically valid" },
    ["V", "stmt", "error(\"\").message();"],
    ["V", "stmt", "0x2.toString();"],
    ["V", "stmt", "1.0.toString();"],
    ["V", "stmt", "true.toString();"],
    ["V", "stmt", "null.toString();", "().toString();"],
    ["V", "stmt", "().toString();"],
    ["V", "stmt", "null[1].toString();", "(()[1]).toString();"],
    ["V", "stmt", "()[1].toString();", "(()[1]).toString();"],
    ["V", "stmt", "\"foo\"[1].toString();", "(\"foo\"[1]).toString();"],
    ["V", "stmt", "v[x].foo();", "(v[x]).foo();"],
    ["V", "stmt", "v[2][3].foo();", "((v[2])[3]).foo();"],
    ["E", "stmt", "int[x].foo();"],

    { "comment" : "statement lvalue" },
    ["V", "stmt", "a.b = c;"],
    ["V", "stmt", "a.b.c.d = e;"],
    ["V", "stmt", "a.b += c;"],
    ["V", "stmt", "a.b.c.d += e;"],
    ["E", "stmt", "a.1 = b;", ""],
    ["V", "stmt", "a.b.c[x] += e;"],
    ["V", "stmt", "a[x][y][z] = e;"],
    ["V", "stmt", "a[x][y][z] -= e;"],
    ["V", "stmt", "a[m].b[m].c.d = e;"],
    ["V", "stmt", "a[m].b[m].c.d -= e;"],

    { "comment" : "statement assign" },
    ["E", "stmt", "a = b = d;", ""],
    ["V", "stmt", "a = 0;"],
    ["V", "stmt", "a = 0 == 1;"],
    ["E", "stmt", "a + b = c + d;", ""],
    ["V", "stmt", "a = 0 != 1;"],
    ["V", "stmt", "v[x] = 1;"],
    ["V", "stmt", "v[x] += 1;"],
    ["V", "stmt", "v[x] >>>= 1;"],
    ["V", "stmt", "v[1][3] = 1;"],
    ["E", "stmt", "int[1] = foo();"],
    ["E", "stmt", "int[1] += 1;"],

    { "comment" : "statement destructuring assign" },
    ["V", "stmt", "_ = a;"],
    ["E", "stmt", "_ equals 1;", ""],

    { "comment" : "statement if else" },
    ["E", "stmt", "if a noOp(1);", ""],
    ["E", "stmt", "if a {} else return;", ""],
    ["E", "stmt", "if a = b {}", ""],

    { "comment" : "check" },
    ["V", "stmt", "check a();"],
    ["V", "stmt", "check check a();"],
    ["E", "stmt", "check (a());"],
    ["E", "stmt", "check check (a());"],
    ["V", "stmt", "check ().clone();"],
    ["E", "stmt", "check a;"],
    ["E", "stmt", "check a() + b();"],
    ["E", "stmt", "check a[1];"],
    ["V", "stmt", "check a.b();"],
    ["E", "stmt", "check (a.b());"],
    ["V", "stmt", "check ((a)).b();", "check a.b();"],
    ["V", "stmt", "check a[1].b();", "check (a[1]).b();"],

    { "comment" : "module parts" },
    ["V", "mod", "type T 1;\nfunction f() {\n}"],
    ["V", "mod", "type ER error<map<readonly>>;"],
    ["E", "mod", "import;", ""],
    ["V", "mod", "import x;"],
    ["V", "mod", "import x/y;"]
]
