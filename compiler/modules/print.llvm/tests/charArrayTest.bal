import ballerina/test;

// Test cases from https://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt
@test:Config {}
function firstPossibleSequenceCharArray() returns error? {
    test:assertEquals(charArray("ÔøΩ".toBytes()), "c\"\\EF\\BF\\BD\"");
    test:assertEquals(charArray("¬Ä".toBytes()), "c\"\\C2\\80\"");
    test:assertEquals(charArray("‡†Ä".toBytes()), "c\"\\E0\\A0\\80\"");
    test:assertEquals(charArray("êÄÄ".toBytes()), "c\"\\F0\\90\\80\\80\"");
    test:assertEquals(charArray("ÔøΩÔøΩÔøΩÔøΩÔøΩ".toBytes()), "c\"\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\"");
    test:assertEquals(charArray("ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".toBytes()), "c\"\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\"");
}

@test:Config {}
function lastPossibleSequenceCharArray() returns error? {
    test:assertEquals(charArray("".toBytes()), "c\"\\7F\"");
    test:assertEquals(charArray("ﬂø".toBytes()), "c\"\\DF\\BF\"");
    test:assertEquals(charArray("Ôøø".toBytes()), "c\"\\EF\\BF\\BF\"");
    test:assertEquals(charArray("ÔøΩÔøΩÔøΩÔøΩ".toBytes()), "c\"\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\"");
    test:assertEquals(charArray("ÔøΩÔøΩÔøΩÔøΩÔøΩ".toBytes()), "c\"\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\"");
    test:assertEquals(charArray("ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ".toBytes()), "c\"\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\"");
}

@test:Config {}
function otherBoundaryConditionsCharArray() returns error? {
    test:assertEquals(charArray("Ìüø".toBytes()), "c\"\\ED\\9F\\BF\"");
    test:assertEquals(charArray("ÓÄÄ".toBytes()), "c\"\\EE\\80\\80\"");
    test:assertEquals(charArray("ÔøΩ".toBytes()), "c\"\\EF\\BF\\BD\"");
    test:assertEquals(charArray("Ùèøø".toBytes()), "c\"\\F4\\8F\\BF\\BF\"");
    test:assertEquals(charArray("ÔøΩÔøΩÔøΩÔøΩ".toBytes()), "c\"\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\\EF\\BF\\BD\"");
}

// Pangram test cases from https://www.cl.cam.ac.uk/~mgk25/ucs/examples/quickbrown.txt
@test:Config {}
function correctUnicodeSequencesDanishCharArray() returns error? {
    test:assertEquals(charArray("Quizdeltagerne".toBytes()), "c\"Quizdeltagerne\"");
    test:assertEquals(charArray("spiste".toBytes()), "c\"spiste\"");
    test:assertEquals(charArray("jordb√¶r".toBytes()), "c\"jordb\\C3\\A6r\"");
    test:assertEquals(charArray("med".toBytes()), "c\"med\"");
    test:assertEquals(charArray("fl√∏de,".toBytes()), "c\"fl\\C3\\B8de,\"");
    test:assertEquals(charArray("mens".toBytes()), "c\"mens\"");
    test:assertEquals(charArray("cirkusklovnen".toBytes()), "c\"cirkusklovnen\"");
    test:assertEquals(charArray("Wolther".toBytes()), "c\"Wolther\"");
    test:assertEquals(charArray("spillede".toBytes()), "c\"spillede\"");
    test:assertEquals(charArray("p√•".toBytes()), "c\"p\\C3\\A5\"");
    test:assertEquals(charArray("xylofon.".toBytes()), "c\"xylofon.\"");
}

@test:Config {}
function correctUnicodeSequencesGermanCharArray() returns error? {
    test:assertEquals(charArray("Falsches".toBytes()), "c\"Falsches\"");
    test:assertEquals(charArray("√úben".toBytes()), "c\"\\C3\\9Cben\"");
    test:assertEquals(charArray("von".toBytes()), "c\"von\"");
    test:assertEquals(charArray("Xylophonmusik".toBytes()), "c\"Xylophonmusik\"");
    test:assertEquals(charArray("qu√§lt".toBytes()), "c\"qu\\C3\\A4lt\"");
    test:assertEquals(charArray("jeden".toBytes()), "c\"jeden\"");
    test:assertEquals(charArray("gr√∂√üeren".toBytes()), "c\"gr\\C3\\B6\\C3\\9Feren\"");
    test:assertEquals(charArray("Zwerg".toBytes()), "c\"Zwerg\"");
    test:assertEquals(charArray("Zw√∂lf".toBytes()), "c\"Zw\\C3\\B6lf\"");
    test:assertEquals(charArray("Boxk√§mpfer".toBytes()), "c\"Boxk\\C3\\A4mpfer\"");
    test:assertEquals(charArray("jagten".toBytes()), "c\"jagten\"");
    test:assertEquals(charArray("Eva".toBytes()), "c\"Eva\"");
    test:assertEquals(charArray("quer".toBytes()), "c\"quer\"");
    test:assertEquals(charArray("√ºber".toBytes()), "c\"\\C3\\BCber\"");
    test:assertEquals(charArray("den".toBytes()), "c\"den\"");
    test:assertEquals(charArray("Sylter".toBytes()), "c\"Sylter\"");
    test:assertEquals(charArray("Deich".toBytes()), "c\"Deich\"");
    test:assertEquals(charArray("Heiz√∂lr√ºcksto√üabd√§mpfung".toBytes()), "c\"Heiz\\C3\\B6lr\\C3\\BCcksto\\C3\\9Fabd\\C3\\A4mpfung\"");
}

@test:Config {}
function correctUnicodeSequencesGreekCharArray() returns error? {
    test:assertEquals(charArray("ŒìŒ±Œ∂Œ≠ŒµœÇ".toBytes()), "c\"\\CE\\93\\CE\\B1\\CE\\B6\\CE\\AD\\CE\\B5\\CF\\82\"");
    test:assertEquals(charArray("Œ∫Œ±·Ω∂".toBytes()), "c\"\\CE\\BA\\CE\\B1\\E1\\BD\\B6\"");
    test:assertEquals(charArray("ŒºœÖœÅœÑŒπ·Ω≤œÇ".toBytes()), "c\"\\CE\\BC\\CF\\85\\CF\\81\\CF\\84\\CE\\B9\\E1\\BD\\B2\\CF\\82\"");
    test:assertEquals(charArray("Œ¥·Ω≤ŒΩ".toBytes()), "c\"\\CE\\B4\\E1\\BD\\B2\\CE\\BD\"");
    test:assertEquals(charArray("Œ∏·Ω∞".toBytes()), "c\"\\CE\\B8\\E1\\BD\\B0\"");
    test:assertEquals(charArray("Œ≤œÅ·ø∂".toBytes()), "c\"\\CE\\B2\\CF\\81\\E1\\BF\\B6\"");
    test:assertEquals(charArray("œÄŒπ·Ω∞".toBytes()), "c\"\\CF\\80\\CE\\B9\\E1\\BD\\B0\"");
    test:assertEquals(charArray("œÉœÑ·Ω∏".toBytes()), "c\"\\CF\\83\\CF\\84\\E1\\BD\\B8\"");
    test:assertEquals(charArray("œáœÅœÖœÉŒ±œÜ·Ω∂".toBytes()), "c\"\\CF\\87\\CF\\81\\CF\\85\\CF\\83\\CE\\B1\\CF\\86\\E1\\BD\\B6\"");
    test:assertEquals(charArray("ŒæŒ≠œÜœâœÑŒø".toBytes()), "c\"\\CE\\BE\\CE\\AD\\CF\\86\\CF\\89\\CF\\84\\CE\\BF\"");
    test:assertEquals(charArray("ŒûŒµœÉŒ∫ŒµœÄŒ¨Œ∂œâ".toBytes()), "c\"\\CE\\9E\\CE\\B5\\CF\\83\\CE\\BA\\CE\\B5\\CF\\80\\CE\\AC\\CE\\B6\\CF\\89\"");
    test:assertEquals(charArray("œÑ·Ω¥ŒΩ".toBytes()), "c\"\\CF\\84\\E1\\BD\\B4\\CE\\BD\"");
    test:assertEquals(charArray("œàœÖœáŒøœÜŒ∏œåœÅŒ±".toBytes()), "c\"\\CF\\88\\CF\\85\\CF\\87\\CE\\BF\\CF\\86\\CE\\B8\\CF\\8C\\CF\\81\\CE\\B1\"");
    test:assertEquals(charArray("Œ≤Œ¥ŒµŒªœÖŒ≥ŒºŒØŒ±".toBytes()), "c\"\\CE\\B2\\CE\\B4\\CE\\B5\\CE\\BB\\CF\\85\\CE\\B3\\CE\\BC\\CE\\AF\\CE\\B1\"");
}

@test:Config {}
function correctUnicodeSequencesEnglishCharArray() returns error? {
    test:assertEquals(charArray("The".toBytes()), "c\"The\"");
    test:assertEquals(charArray("quick".toBytes()), "c\"quick\"");
    test:assertEquals(charArray("brown".toBytes()), "c\"brown\"");
    test:assertEquals(charArray("fox".toBytes()), "c\"fox\"");
    test:assertEquals(charArray("jumps".toBytes()), "c\"jumps\"");
    test:assertEquals(charArray("over".toBytes()), "c\"over\"");
    test:assertEquals(charArray("the".toBytes()), "c\"the\"");
    test:assertEquals(charArray("lazy".toBytes()), "c\"lazy\"");
    test:assertEquals(charArray("dog".toBytes()), "c\"dog\"");
}

@test:Config {}
function correctUnicodeSequencesSpanishCharArray() returns error? {
    test:assertEquals(charArray("El".toBytes()), "c\"El\"");
    test:assertEquals(charArray("ping√ºino".toBytes()), "c\"ping\\C3\\BCino\"");
    test:assertEquals(charArray("Wenceslao".toBytes()), "c\"Wenceslao\"");
    test:assertEquals(charArray("hizo".toBytes()), "c\"hizo\"");
    test:assertEquals(charArray("kil√≥metros".toBytes()), "c\"kil\\C3\\B3metros\"");
    test:assertEquals(charArray("bajo".toBytes()), "c\"bajo\"");
    test:assertEquals(charArray("exhaustiva".toBytes()), "c\"exhaustiva\"");
    test:assertEquals(charArray("lluvia".toBytes()), "c\"lluvia\"");
    test:assertEquals(charArray("y".toBytes()), "c\"y\"");
    test:assertEquals(charArray("fr√≠o,".toBytes()), "c\"fr\\C3\\ADo,\"");
    test:assertEquals(charArray("a√±oraba".toBytes()), "c\"a\\C3\\B1oraba\"");
    test:assertEquals(charArray("has".toBytes()), "c\"has\"");
    test:assertEquals(charArray("known".toBytes()), "c\"known\"");
    test:assertEquals(charArray("querido".toBytes()), "c\"querido\"");
    test:assertEquals(charArray("cachorro.".toBytes()), "c\"cachorro.\"");
}

@test:Config {}
function correctUnicodeSequencesGaelicCharArray() returns error? {
    test:assertEquals(charArray("D'fhuascail".toBytes()), "c\"D'fhuascail\"");
    test:assertEquals(charArray("√çosa,".toBytes()), "c\"\\C3\\8Dosa,\"");
    test:assertEquals(charArray("√örmhac".toBytes()), "c\"\\C3\\9Armhac\"");
    test:assertEquals(charArray("na".toBytes()), "c\"na\"");
    test:assertEquals(charArray("h√ìighe".toBytes()), "c\"h\\C3\\93ighe\"");
    test:assertEquals(charArray("Beannaithe,".toBytes()), "c\"Beannaithe,\"");
    test:assertEquals(charArray("p√≥r".toBytes()), "c\"p\\C3\\B3r\"");
    test:assertEquals(charArray("√âava".toBytes()), "c\"\\C3\\89ava\"");
    test:assertEquals(charArray("agus".toBytes()), "c\"agus\"");
    test:assertEquals(charArray("√Ådhaimh".toBytes()), "c\"\\C3\\81dhaimh\"");
}

@test:Config {}
function correctUnicodeSequencesHungarianCharArray() returns error? {
    test:assertEquals(charArray("√Årv√≠zt≈±r≈ë".toBytes()), "c\"\\C3\\81rv\\C3\\ADzt\\C5\\B1r\\C5\\91\"");
    test:assertEquals(charArray("t√ºk√∂rf√∫r√≥g√©p".toBytes()), "c\"t\\C3\\BCk\\C3\\B6rf\\C3\\BAr\\C3\\B3g\\C3\\A9p\"");
}

@test:Config {}
function correctUnicodeSequencesIcelandicCharArray() returns error? {
    test:assertEquals(charArray("K√¶mi".toBytes()), "c\"K\\C3\\A6mi\"");
    test:assertEquals(charArray("n√Ω".toBytes()), "c\"n\\C3\\BD\"");
    test:assertEquals(charArray("√∂xi".toBytes()), "c\"\\C3\\B6xi\"");
    test:assertEquals(charArray("her".toBytes()), "c\"her\"");
    test:assertEquals(charArray("ykist".toBytes()), "c\"ykist\"");
    test:assertEquals(charArray("√æj√≥fum".toBytes()), "c\"\\C3\\BEj\\C3\\B3fum\"");
    test:assertEquals(charArray("n√∫".toBytes()), "c\"n\\C3\\BA\"");
    test:assertEquals(charArray("b√¶√∞i".toBytes()), "c\"b\\C3\\A6\\C3\\B0i\"");
    test:assertEquals(charArray("v√≠l".toBytes()), "c\"v\\C3\\ADl\"");
    test:assertEquals(charArray("og".toBytes()), "c\"og\"");
    test:assertEquals(charArray("√°drepa".toBytes()), "c\"\\C3\\A1drepa\"");
    test:assertEquals(charArray("S√¶v√∂r".toBytes()), "c\"S\\C3\\A6v\\C3\\B6r\"");
    test:assertEquals(charArray("gr√©t".toBytes()), "c\"gr\\C3\\A9t\"");
    test:assertEquals(charArray("√°√∞an".toBytes()), "c\"\\C3\\A1\\C3\\B0an\"");
    test:assertEquals(charArray("√æv√≠".toBytes()), "c\"\\C3\\BEv\\C3\\AD\"");
    test:assertEquals(charArray("√∫lpan".toBytes()), "c\"\\C3\\BAlpan\"");
    test:assertEquals(charArray("var".toBytes()), "c\"var\"");
    test:assertEquals(charArray("√≥n√Ωt".toBytes()), "c\"\\C3\\B3n\\C3\\BDt\"");
}

@test:Config {}
function correctUnicodeSequencesJapaneseCharArray() returns error? {
    test:assertEquals(charArray("„ÅÑ".toBytes()), "c\"\\E3\\81\\84\"");
    test:assertEquals(charArray("„Çç".toBytes()), "c\"\\E3\\82\\8D\"");
    test:assertEquals(charArray("„ÅØ".toBytes()), "c\"\\E3\\81\\AF\"");
    test:assertEquals(charArray("„Å´".toBytes()), "c\"\\E3\\81\\AB\"");
    test:assertEquals(charArray("„Åª".toBytes()), "c\"\\E3\\81\\BB\"");
    test:assertEquals(charArray("„Å∏".toBytes()), "c\"\\E3\\81\\B8\"");
    test:assertEquals(charArray("„Å®".toBytes()), "c\"\\E3\\81\\A8\"");
    test:assertEquals(charArray("„Å°".toBytes()), "c\"\\E3\\81\\A1\"");
    test:assertEquals(charArray("„Çä".toBytes()), "c\"\\E3\\82\\8A\"");
    test:assertEquals(charArray("„Å¨".toBytes()), "c\"\\E3\\81\\AC\"");
    test:assertEquals(charArray("„Çã".toBytes()), "c\"\\E3\\82\\8B\"");
    test:assertEquals(charArray("„Çí".toBytes()), "c\"\\E3\\82\\92\"");
    test:assertEquals(charArray("„Çè".toBytes()), "c\"\\E3\\82\\8F\"");
    test:assertEquals(charArray("„Åã".toBytes()), "c\"\\E3\\81\\8B\"");
    test:assertEquals(charArray("„Çà".toBytes()), "c\"\\E3\\82\\88\"");
    test:assertEquals(charArray("„Åü".toBytes()), "c\"\\E3\\81\\9F\"");
    test:assertEquals(charArray("„Çå".toBytes()), "c\"\\E3\\82\\8C\"");
    test:assertEquals(charArray("„Åù".toBytes()), "c\"\\E3\\81\\9D\"");
    test:assertEquals(charArray("„Å§".toBytes()), "c\"\\E3\\81\\A4\"");
    test:assertEquals(charArray("„Å≠".toBytes()), "c\"\\E3\\81\\AD\"");
    test:assertEquals(charArray("„Å™".toBytes()), "c\"\\E3\\81\\AA\"");
    test:assertEquals(charArray("„Çâ".toBytes()), "c\"\\E3\\82\\89\"");
    test:assertEquals(charArray("„ÇÄ".toBytes()), "c\"\\E3\\82\\80\"");
    test:assertEquals(charArray("„ÅÜ".toBytes()), "c\"\\E3\\81\\86\"");
    test:assertEquals(charArray("„Çê".toBytes()), "c\"\\E3\\82\\90\"");
    test:assertEquals(charArray("„ÅÆ".toBytes()), "c\"\\E3\\81\\AE\"");
    test:assertEquals(charArray("„Åä".toBytes()), "c\"\\E3\\81\\8A\"");
    test:assertEquals(charArray("„Åè".toBytes()), "c\"\\E3\\81\\8F\"");
    test:assertEquals(charArray("„ÇÑ".toBytes()), "c\"\\E3\\82\\84\"");
    test:assertEquals(charArray("„Åæ".toBytes()), "c\"\\E3\\81\\BE\"");
    test:assertEquals(charArray("„Åë".toBytes()), "c\"\\E3\\81\\91\"");
    test:assertEquals(charArray("„Åµ".toBytes()), "c\"\\E3\\81\\B5\"");
    test:assertEquals(charArray("„Åì".toBytes()), "c\"\\E3\\81\\93\"");
    test:assertEquals(charArray("„Åà".toBytes()), "c\"\\E3\\81\\88\"");
    test:assertEquals(charArray("„Å¶".toBytes()), "c\"\\E3\\81\\A6\"");
    test:assertEquals(charArray("„ÅÇ".toBytes()), "c\"\\E3\\81\\82\"");
    test:assertEquals(charArray("„Åï".toBytes()), "c\"\\E3\\81\\95\"");
    test:assertEquals(charArray("„Åç".toBytes()), "c\"\\E3\\81\\8D\"");
    test:assertEquals(charArray("„ÇÜ".toBytes()), "c\"\\E3\\82\\86\"");
    test:assertEquals(charArray("„ÇÅ".toBytes()), "c\"\\E3\\82\\81\"");
    test:assertEquals(charArray("„Åø".toBytes()), "c\"\\E3\\81\\BF\"");
    test:assertEquals(charArray("„Åó".toBytes()), "c\"\\E3\\81\\97\"");
    test:assertEquals(charArray("„Çë".toBytes()), "c\"\\E3\\82\\91\"");
    test:assertEquals(charArray("„Å≤".toBytes()), "c\"\\E3\\81\\B2\"");
    test:assertEquals(charArray("„ÇÇ".toBytes()), "c\"\\E3\\82\\82\"");
    test:assertEquals(charArray("„Åõ".toBytes()), "c\"\\E3\\81\\9B\"");
    test:assertEquals(charArray("„Åô".toBytes()), "c\"\\E3\\81\\99\"");
    test:assertEquals(charArray("„Ç§".toBytes()), "c\"\\E3\\82\\A4\"");
    test:assertEquals(charArray("„É≠".toBytes()), "c\"\\E3\\83\\AD\"");
    test:assertEquals(charArray("„Éè".toBytes()), "c\"\\E3\\83\\8F\"");
    test:assertEquals(charArray("„Éã".toBytes()), "c\"\\E3\\83\\8B\"");
    test:assertEquals(charArray("„Éõ".toBytes()), "c\"\\E3\\83\\9B\"");
    test:assertEquals(charArray("„Éò".toBytes()), "c\"\\E3\\83\\98\"");
    test:assertEquals(charArray("„Éà".toBytes()), "c\"\\E3\\83\\88\"");
    test:assertEquals(charArray("„ÉÅ".toBytes()), "c\"\\E3\\83\\81\"");
    test:assertEquals(charArray("„É™".toBytes()), "c\"\\E3\\83\\AA\"");
    test:assertEquals(charArray("„Éå".toBytes()), "c\"\\E3\\83\\8C\"");
    test:assertEquals(charArray("„É´".toBytes()), "c\"\\E3\\83\\AB\"");
    test:assertEquals(charArray("„É≤".toBytes()), "c\"\\E3\\83\\B2\"");
    test:assertEquals(charArray("„ÉØ".toBytes()), "c\"\\E3\\83\\AF\"");
    test:assertEquals(charArray("„Ç´".toBytes()), "c\"\\E3\\82\\AB\"");
    test:assertEquals(charArray("„É®".toBytes()), "c\"\\E3\\83\\A8\"");
    test:assertEquals(charArray("„Çø".toBytes()), "c\"\\E3\\82\\BF\"");
    test:assertEquals(charArray("„É¨".toBytes()), "c\"\\E3\\83\\AC\"");
    test:assertEquals(charArray("„ÇΩ".toBytes()), "c\"\\E3\\82\\BD\"");
    test:assertEquals(charArray("„ÉÑ".toBytes()), "c\"\\E3\\83\\84\"");
    test:assertEquals(charArray("„Éç".toBytes()), "c\"\\E3\\83\\8D\"");
    test:assertEquals(charArray("„Éä".toBytes()), "c\"\\E3\\83\\8A\"");
    test:assertEquals(charArray("„É©".toBytes()), "c\"\\E3\\83\\A9\"");
    test:assertEquals(charArray("„É†".toBytes()), "c\"\\E3\\83\\A0\"");
    test:assertEquals(charArray("„Ç¶".toBytes()), "c\"\\E3\\82\\A6\"");
    test:assertEquals(charArray("„É∞".toBytes()), "c\"\\E3\\83\\B0\"");
    test:assertEquals(charArray("„Éé".toBytes()), "c\"\\E3\\83\\8E\"");
    test:assertEquals(charArray("„Ç™".toBytes()), "c\"\\E3\\82\\AA\"");
    test:assertEquals(charArray("„ÇØ".toBytes()), "c\"\\E3\\82\\AF\"");
    test:assertEquals(charArray("„É§".toBytes()), "c\"\\E3\\83\\A4\"");
    test:assertEquals(charArray("„Éû".toBytes()), "c\"\\E3\\83\\9E\"");
    test:assertEquals(charArray("„Ç±".toBytes()), "c\"\\E3\\82\\B1\"");
    test:assertEquals(charArray("„Éï".toBytes()), "c\"\\E3\\83\\95\"");
    test:assertEquals(charArray("„Ç≥".toBytes()), "c\"\\E3\\82\\B3\"");
    test:assertEquals(charArray("„Ç®".toBytes()), "c\"\\E3\\82\\A8\"");
    test:assertEquals(charArray("„ÉÜ".toBytes()), "c\"\\E3\\83\\86\"");
    test:assertEquals(charArray("„Ç¢".toBytes()), "c\"\\E3\\82\\A2\"");
    test:assertEquals(charArray("„Çµ".toBytes()), "c\"\\E3\\82\\B5\"");
    test:assertEquals(charArray("„Ç≠".toBytes()), "c\"\\E3\\82\\AD\"");
    test:assertEquals(charArray("„É¶".toBytes()), "c\"\\E3\\83\\A6\"");
    test:assertEquals(charArray("„É°".toBytes()), "c\"\\E3\\83\\A1\"");
    test:assertEquals(charArray("„Éü".toBytes()), "c\"\\E3\\83\\9F\"");
    test:assertEquals(charArray("„Ç∑".toBytes()), "c\"\\E3\\82\\B7\"");
    test:assertEquals(charArray("„É±".toBytes()), "c\"\\E3\\83\\B1\"");
    test:assertEquals(charArray("„Éí".toBytes()), "c\"\\E3\\83\\92\"");
    test:assertEquals(charArray("„É¢".toBytes()), "c\"\\E3\\83\\A2\"");
    test:assertEquals(charArray("„Çª".toBytes()), "c\"\\E3\\82\\BB\"");
    test:assertEquals(charArray("„Çπ".toBytes()), "c\"\\E3\\82\\B9\"");
    test:assertEquals(charArray("„É≥".toBytes()), "c\"\\E3\\83\\B3\"");
}

@test:Config {}
function correctUnicodeSequencesHebrewCharArray() returns error? {
    test:assertEquals(charArray("◊ì◊í".toBytes()), "c\"\\D7\\93\\D7\\92\"");
    test:assertEquals(charArray("◊°◊ß◊®◊ü".toBytes()), "c\"\\D7\\A1\\D7\\A7\\D7\\A8\\D7\\9F\"");
    test:assertEquals(charArray("◊©◊ò".toBytes()), "c\"\\D7\\A9\\D7\\98\"");
    test:assertEquals(charArray("◊ë◊ô◊ù".toBytes()), "c\"\\D7\\91\\D7\\99\\D7\\9D\"");
    test:assertEquals(charArray("◊û◊ê◊ï◊õ◊ñ◊ë".toBytes()), "c\"\\D7\\9E\\D7\\90\\D7\\95\\D7\\9B\\D7\\96\\D7\\91\"");
    test:assertEquals(charArray("◊ï◊ú◊§◊™◊¢".toBytes()), "c\"\\D7\\95\\D7\\9C\\D7\\A4\\D7\\AA\\D7\\A2\"");
    test:assertEquals(charArray("◊û◊¶◊ê".toBytes()), "c\"\\D7\\9E\\D7\\A6\\D7\\90\"");
    test:assertEquals(charArray("◊ú◊ï".toBytes()), "c\"\\D7\\9C\\D7\\95\"");
    test:assertEquals(charArray("◊ó◊ë◊®◊î".toBytes()), "c\"\\D7\\97\\D7\\91\\D7\\A8\\D7\\94\"");
    test:assertEquals(charArray("◊ê◊ô◊ö".toBytes()), "c\"\\D7\\90\\D7\\99\\D7\\9A\"");
    test:assertEquals(charArray("◊î◊ß◊ú◊ô◊ò◊î".toBytes()), "c\"\\D7\\94\\D7\\A7\\D7\\9C\\D7\\99\\D7\\98\\D7\\94\"");
}

@test:Config {}
function correctUnicodeSequencesPolishCharArray() returns error? {
    test:assertEquals(charArray("PchnƒÖƒá".toBytes()), "c\"Pchn\\C4\\85\\C4\\87\"");
    test:assertEquals(charArray("w".toBytes()), "c\"w\"");
    test:assertEquals(charArray("tƒô".toBytes()), "c\"t\\C4\\99\"");
    test:assertEquals(charArray("≈Ç√≥d≈∫".toBytes()), "c\"\\C5\\82\\C3\\B3d\\C5\\BA\"");
    test:assertEquals(charArray("je≈ºa".toBytes()), "c\"je\\C5\\BCa\"");
    test:assertEquals(charArray("lub".toBytes()), "c\"lub\"");
    test:assertEquals(charArray("o≈õm".toBytes()), "c\"o\\C5\\9Bm\"");
    test:assertEquals(charArray("skrzy≈Ñ".toBytes()), "c\"skrzy\\C5\\84\"");
    test:assertEquals(charArray("fig".toBytes()), "c\"fig\"");
}

@test:Config {}
function correctUnicodeSequencesRussianCharArray() returns error? {
    test:assertEquals(charArray("–í".toBytes()), "c\"\\D0\\92\"");
    test:assertEquals(charArray("—á–∞—â–∞—Ö".toBytes()), "c\"\\D1\\87\\D0\\B0\\D1\\89\\D0\\B0\\D1\\85\"");
    test:assertEquals(charArray("—é–≥–∞".toBytes()), "c\"\\D1\\8E\\D0\\B3\\D0\\B0\"");
    test:assertEquals(charArray("–∂–∏–ª".toBytes()), "c\"\\D0\\B6\\D0\\B8\\D0\\BB\"");
    test:assertEquals(charArray("–±—ã".toBytes()), "c\"\\D0\\B1\\D1\\8B\"");
    test:assertEquals(charArray("—Ü–∏—Ç—Ä—É—Å?".toBytes()), "c\"\\D1\\86\\D0\\B8\\D1\\82\\D1\\80\\D1\\83\\D1\\81?\"");
    test:assertEquals(charArray("–î–∞,".toBytes()), "c\"\\D0\\94\\D0\\B0,\"");
    test:assertEquals(charArray("–Ω–æ".toBytes()), "c\"\\D0\\BD\\D0\\BE\"");
    test:assertEquals(charArray("—Ñ–∞–ª—å—à–∏–≤—ã–π".toBytes()), "c\"\\D1\\84\\D0\\B0\\D0\\BB\\D1\\8C\\D1\\88\\D0\\B8\\D0\\B2\\D1\\8B\\D0\\B9\"");
    test:assertEquals(charArray("—ç–∫–∑–µ–º–ø–ª—è—Ä!".toBytes()), "c\"\\D1\\8D\\D0\\BA\\D0\\B7\\D0\\B5\\D0\\BC\\D0\\BF\\D0\\BB\\D1\\8F\\D1\\80!\"");
    test:assertEquals(charArray("–°—ä–µ—à—å".toBytes()), "c\"\\D0\\A1\\D1\\8A\\D0\\B5\\D1\\88\\D1\\8C\"");
    test:assertEquals(charArray("–∂–µ".toBytes()), "c\"\\D0\\B6\\D0\\B5\"");
    test:assertEquals(charArray("–µ—â—ë".toBytes()), "c\"\\D0\\B5\\D1\\89\\D1\\91\"");
    test:assertEquals(charArray("—ç—Ç–∏—Ö".toBytes()), "c\"\\D1\\8D\\D1\\82\\D0\\B8\\D1\\85\"");
    test:assertEquals(charArray("–º—è–≥–∫–∏—Ö".toBytes()), "c\"\\D0\\BC\\D1\\8F\\D0\\B3\\D0\\BA\\D0\\B8\\D1\\85\"");
    test:assertEquals(charArray("—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏—Ö".toBytes()), "c\"\\D1\\84\\D1\\80\\D0\\B0\\D0\\BD\\D1\\86\\D1\\83\\D0\\B7\\D1\\81\\D0\\BA\\D0\\B8\\D1\\85\"");
    test:assertEquals(charArray("–±—É–ª–æ–∫".toBytes()), "c\"\\D0\\B1\\D1\\83\\D0\\BB\\D0\\BE\\D0\\BA\"");
    test:assertEquals(charArray("–¥–∞".toBytes()), "c\"\\D0\\B4\\D0\\B0\"");
    test:assertEquals(charArray("–≤—ã–ø–µ–π".toBytes()), "c\"\\D0\\B2\\D1\\8B\\D0\\BF\\D0\\B5\\D0\\B9\"");
    test:assertEquals(charArray("—á–∞—é".toBytes()), "c\"\\D1\\87\\D0\\B0\\D1\\8E\"");
}

@test:Config {}
function correctUnicodeSequencesTurkishCharArray() returns error? {
    test:assertEquals(charArray("Pijamalƒ±".toBytes()), "c\"Pijamal\\C4\\B1\"");
    test:assertEquals(charArray("hasta,".toBytes()), "c\"hasta,\"");
    test:assertEquals(charArray("yaƒüƒ±z".toBytes()), "c\"ya\\C4\\9F\\C4\\B1z\"");
    test:assertEquals(charArray("≈üof√∂re".toBytes()), "c\"\\C5\\9Fof\\C3\\B6re\"");
    test:assertEquals(charArray("√ßabucak".toBytes()), "c\"\\C3\\A7abucak\"");
    test:assertEquals(charArray("g√ºvendi.".toBytes()), "c\"g\\C3\\BCvendi.\"");
}

@test:Config {}
function correctUnicodeSymbolsCharArray() returns error? {
    test:assertEquals(charArray("ÓÄÄÓÄÅÓÄÇÓÄÉÓÄÑÓÄÖÓÄÜÓÄáÓÄàÓÄâÓÄäÓÄãÓÄåÓÄçÓÄéÓÄèÓÄêÓÄëÓÄíÓÄìÓÄîÓÄïÓÄñÓÄóÓÄòÓÄôÓÄöÓÄõÓÄúÓÄùÓÄûÓÄü‚ê°ÓÇÄÓÇÅÓÇÇÓÇÉÓÇÑÓÇÖÓÇÜÓÇáÓÇàÓÇâÓÇäÓÇãÓÇåÓÇçÓÇéÓÇèÓÇêÓÇëÓÇíÓÇìÓÇîÓÇïÓÇñÓÇóÓÇòÓÇôÓÇöÓÇõÓÇúÓÇùÓÇûÓÇü".toBytes()), "c\"\\EE\\80\\80\\EE\\80\\81\\EE\\80\\82\\EE\\80\\83\\EE\\80\\84\\EE\\80\\85\\EE\\80\\86\\EE\\80\\87\\EE\\80\\88\\EE\\80\\89\\EE\\80\\8A\\EE\\80\\8B\\EE\\80\\8C\\EE\\80\\8D\\EE\\80\\8E\\EE\\80\\8F\\EE\\80\\90\\EE\\80\\91\\EE\\80\\92\\EE\\80\\93\\EE\\80\\94\\EE\\80\\95\\EE\\80\\96\\EE\\80\\97\\EE\\80\\98\\EE\\80\\99\\EE\\80\\9A\\EE\\80\\9B\\EE\\80\\9C\\EE\\80\\9D\\EE\\80\\9E\\EE\\80\\9F\\E2\\90\\A1\\EE\\82\\80\\EE\\82\\81\\EE\\82\\82\\EE\\82\\83\\EE\\82\\84\\EE\\82\\85\\EE\\82\\86\\EE\\82\\87\\EE\\82\\88\\EE\\82\\89\\EE\\82\\8A\\EE\\82\\8B\\EE\\82\\8C\\EE\\82\\8D\\EE\\82\\8E\\EE\\82\\8F\\EE\\82\\90\\EE\\82\\91\\EE\\82\\92\\EE\\82\\93\\EE\\82\\94\\EE\\82\\95\\EE\\82\\96\\EE\\82\\97\\EE\\82\\98\\EE\\82\\99\\EE\\82\\9A\\EE\\82\\9B\\EE\\82\\9C\\EE\\82\\9D\\EE\\82\\9E\\EE\\82\\9F\"");
    test:assertEquals(charArray("!\"#$%&'()*+,-./0123456789:;<=>?@[\\]^_`{|}~¬°¬¢¬£¬§¬•¬¶¬ß¬®¬©¬™¬´¬¨¬≠¬Æ¬Ø¬∞¬±¬≤¬≥¬¥¬µ¬∂¬∑¬∏¬π¬∫¬ª¬º¬Ω¬æ¬ø".toBytes()), "c\"!\\22#$%&'()*+,-./0123456789:;<=>?@[\\5C]^_`{|}~\\C2\\A1\\C2\\A2\\C2\\A3\\C2\\A4\\C2\\A5\\C2\\A6\\C2\\A7\\C2\\A8\\C2\\A9\\C2\\AA\\C2\\AB\\C2\\AC\\C2\\AD\\C2\\AE\\C2\\AF\\C2\\B0\\C2\\B1\\C2\\B2\\C2\\B3\\C2\\B4\\C2\\B5\\C2\\B6\\C2\\B7\\C2\\B8\\C2\\B9\\C2\\BA\\C2\\BB\\C2\\BC\\C2\\BD\\C2\\BE\\C2\\BF\"");
}
