(let ((int-cell (cell int readonly))
      (boolean-cell (cell boolean matching))
      (string-cell (cell string mutable))
      (int-boolean-or-string-cell (cell (| int boolean string) matching)))
     (assert< (| int-cell boolean-cell string-cell) int-boolean-or-string-cell))

(let ((int-cell (cell int readonly))
      (boolean-cell (cell boolean matching))
      (string-cell (cell string mutable))
      (int-boolean-or-string-cell (cell (| int boolean string) readonly)))
     (assert< int-boolean-or-string-cell (| int-cell boolean-cell string-cell)))

(let ((int-cell (cell int readonly))
      (boolean-cell (cell boolean matching))
      (string-cell (cell string mutable))
      (int-boolean-or-string-cell (cell (| int boolean string) mutable)))
     (assert<> (| int-cell boolean-cell string-cell) int-boolean-or-string-cell))

(let ((int-readonly-cell (cell int readonly))
      (int-mutable-cell (cell int mutable))
      (int-matching-cell (cell int matching)))
     (assert= (| int-readonly-cell int-mutable-cell int-matching-cell) int-matching-cell))

(let ((int-readonly-cell (cell int readonly))
      (int-mutable-cell (cell int mutable))
      (int-matching-cell (cell int matching)))
     (assert< (& int-readonly-cell int-mutable-cell int-matching-cell) int-matching-cell))

(let ((int-readonly-cell (cell int readonly))
      (int-mutable-cell (cell int mutable))
      (int-matching-cell (cell int matching)))
     (assert< (& int-readonly-cell int-mutable-cell int-matching-cell) int-mutable-cell))

(let ((int-readonly-cell (cell int readonly))
      (int-mutable-cell (cell int mutable))
      (int-matching-cell (cell int matching)))
     (assert= (& int-readonly-cell int-mutable-cell int-matching-cell) int-readonly-cell))

(let ((int-readonly-cell (cell int readonly))
      (int-mutable-cell (cell int mutable))
      (byte-matching-cell (cell (int (0 255)) matching))
      (byte-mutable-cell (cell (int (0 255)) mutable)))
     (assert< (& int-readonly-cell int-mutable-cell byte-matching-cell) byte-mutable-cell))

(let ((int-readonly-cell (cell int readonly))
      (int-mutable-cell (cell int mutable))
      (boolean-mutable-cell (cell boolean mutable))
      (byte-mutable-cell (cell (int (0 255)) mutable))
      (byte-readonly-cell (cell (int (0 255)) readonly)))
     (assert= (& int-readonly-cell (| byte-mutable-cell boolean-mutable-cell)) byte-readonly-cell))
