(assert= int int)
(let ((cell-a (cell int readonly))
      (cell-b (cell int readonly)))
     (assert= cell-a cell-b))
(let ((cell-a (cell int mutable))
      (cell-b (cell int mutable)))
     (assert= cell-a cell-b))
(let ((cell-a (cell int matching))
      (cell-b (cell int matching)))
     (assert= cell-a cell-b))

(assert= boolean boolean)
(let ((cell-a (cell (| int boolean) readonly))
      (cell-b (cell (| int boolean) readonly)))
     (assert= cell-a cell-b))
(let ((cell-a (cell (| int boolean) mutable))
      (cell-b (cell (| int boolean) mutable)))
     (assert= cell-a cell-b))
(let ((cell-a (cell (| int boolean) matching))
      (cell-b (cell (| int boolean) matching)))
     (assert= cell-a cell-b))

(assert< (int (0 255)) int)
(let ((cell-a (cell (int (0 255)) readonly))
      (cell-b (cell int readonly)))
     (assert< cell-a cell-b))
(let ((cell-a (cell (int (0 255)) mutable))
      (cell-b (cell int mutable)))
     (assert< cell-a cell-b))
(let ((cell-a (cell (int (0 255)) matching))
      (cell-b (cell int matching)))
     (assert< cell-a cell-b))     

(assert<> boolean int)
(let ((cell-a (cell boolean readonly))
      (cell-b (cell int readonly)))
     (assert<> cell-a cell-b))
(let ((cell-a (cell boolean mutable))
      (cell-b (cell int mutable)))
     (assert<> cell-a cell-b))
(let ((cell-a (cell boolean matching))
      (cell-b (cell int matching)))
     (assert<> cell-a cell-b))

(assert= (| int boolean) (| int boolean))
(let ((int-cell (cell int readonly))
      (boolean-cell (cell boolean readonly))
      (int-or-boolean-cell (cell (| int boolean) readonly)))
     (assert= (| int-cell boolean-cell) int-or-boolean-cell))
(let ((int-cell (cell int mutable))
      (boolean-cell (cell boolean mutable))
      (int-or-boolean-cell (cell (| int boolean) mutable)))
     (assert< (| int-cell boolean-cell) int-or-boolean-cell))
(let ((int-cell (cell int matching))
      (boolean-cell (cell boolean matching))
      (int-or-boolean-cell (cell (| int boolean) matching)))
     (assert= (| int-cell boolean-cell) int-or-boolean-cell))

(assert= (| int boolean string) (| int boolean string))
(let ((int-cell (cell int readonly))
      (boolean-cell (cell boolean readonly))
      (string-cell (cell string readonly))
      (int-boolean-or-string-cell (cell (| int boolean string) readonly)))
     (assert= (| int-cell boolean-cell string-cell) int-boolean-or-string-cell))
(let ((int-cell (cell int mutable))
      (boolean-cell (cell boolean mutable))
      (string-cell (cell string mutable))
      (int-boolean-or-string-cell (cell (| int boolean string) mutable)))
     (assert< (| int-cell boolean-cell string-cell) int-boolean-or-string-cell))
(let ((int-cell (cell int matching))
      (boolean-cell (cell boolean matching))
      (string-cell (cell string matching))
      (int-boolean-or-string-cell (cell (| int boolean string) matching)))
     (assert= (| int-cell boolean-cell string-cell) int-boolean-or-string-cell))


(let ((int-list (list (int)))
      (boolean-list (list (boolean)))
      (int-or-boolean-list (list ((| int boolean)))))
     (assert= (| int-list boolean-list) int-or-boolean-list))
(let ((int-list (list (int)))
      (boolean-list (list (boolean)))
      (int-or-boolean-list (list ((| int boolean))))
      (int-list-cell (cell int-list readonly))
      (boolean-list-cell (cell boolean-list readonly))
      (int-or-boolean-list-cell (cell int-or-boolean-list readonly)))
     (assert= (| int-list-cell boolean-list-cell) int-or-boolean-list-cell))
(let ((int-list (list (int)))
      (boolean-list (list (boolean)))
      (int-or-boolean-list (list ((| int boolean))))
      (int-list-cell (cell int-list mutable))
      (boolean-list-cell (cell boolean-list mutable))
      (int-or-boolean-list-cell (cell int-or-boolean-list mutable)))
     (assert< (| int-list-cell boolean-list-cell) int-or-boolean-list-cell))
(let ((int-list (list (int)))
      (boolean-list (list (boolean)))
      (int-or-boolean-list (list ((| int boolean))))
      (int-list-cell (cell int-list matching))
      (boolean-list-cell (cell boolean-list matching))
      (int-or-boolean-list-cell (cell int-or-boolean-list matching)))
     (assert= (| int-list-cell boolean-list-cell) int-or-boolean-list-cell))

(let ((cell (cell int readonly)))
     (assert<> cell int))
(let ((cell (cell int mutable)))
     (assert<> cell int))
(let ((cell (cell int matching)))
     (assert<> cell int))
