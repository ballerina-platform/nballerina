/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.1/samples
 */
plugins{
        id 'java-gradle-plugin'
}

repositories {
        mavenCentral()
}

dependencies {
        implementation 'org.bytedeco:llvm-platform:13.0.1-1.5.7'
}

String balConfig = 'Ballerina.toml'
String linux64BalConfig = 'BallerinaLinuxX86_64.toml'

String platformLibs = 'target/platform-libs'
String tmpBuildDir = '../testbuild'
String compilerDir = '../compiler'
String testDir = '../test'
String runtimeDir = '../runtime'

configurations.implementation.setCanBeResolved(true) 
configurations.api.setCanBeResolved(true)
task copyDependencies(type: Copy) {
        from configurations.implementation
        into platformLibs
}

task copyNbal(type: Copy) {
        from compilerDir
        into tmpBuildDir
        filter { line -> line.replaceAll('print.llvm', 'jni.llvm') }
}

task cleanNbackLLVM(type: Delete) {
        delete "${tmpBuildDir}/modules/print.llvm"
        delete "${tmpBuildDir}/main.bal"
}
cleanNbackLLVM.dependsOn(copyNbal)

task copyJNILLVM(type: Copy) {
        from 'modules/jni.llvm'
        into "${tmpBuildDir}/modules/jni.llvm"
}
copyJNILLVM.dependsOn(copyNbal, cleanNbackLLVM)

task copyDriver(type: Copy) {
        from "${compilerDir}/main.bal"
        into "${tmpBuildDir}/"
}
copyDriver.dependsOn(cleanNbackLLVM)
copyDriver.mustRunAfter(copyNbal)

task copyDriverOutput(type: Copy) {
        from 'output.bal'
        into "${tmpBuildDir}/"
}
copyDriverOutput.dependsOn(copyDriver)

task copyLLVMCommon(type: Copy) {
        from "${compilerDir}/modules/print.llvm/common.bal"
        into "${tmpBuildDir}/modules/jni.llvm"
}
copyLLVMCommon.mustRunAfter(copyJNILLVM)

task copyLocalDependencies(type: Copy) {
        from platformLibs
        into "${tmpBuildDir}/target/platform-libs"
}
copyLocalDependencies.dependsOn(copyDependencies)

task copyBalConfig(type: Copy) {
        if (project.hasProperty('linux64Only')) {
                from linux64BalConfig
                into tmpBuildDir
                rename(linux64BalConfig, "Ballerina.toml")
        }
        else {
                from balConfig
                into tmpBuildDir
        }
}
copyBalConfig.dependsOn(copyLocalDependencies, copyNbal)

task testBuild(type: Exec) {
        workingDir tmpBuildDir
        commandLine 'bal', 'test', '--offline', '--tests', 'nballerina:testCompileVPO'
}
testBuild.dependsOn(copyNbal, copyJNILLVM, copyDriver, copyDriverOutput, copyLocalDependencies, copyBalConfig)

task balCompile(type: Exec) {
        workingDir tmpBuildDir
        commandLine 'bal', 'build', '--offline'
}
balCompile.dependsOn(copyNbal, copyJNILLVM, copyDriver, copyDriverOutput, copyLocalDependencies, copyBalConfig)

task compileRuntime(type: Exec) {
        workingDir runtimeDir
        commandLine 'make', 'all'
}

task copyRuntime(type:Copy) {
        from "${runtimeDir}/balrt_inline.bc"
        into "${tmpBuildDir}/target/bin"
}
copyRuntime.mustRunAfter(balCompile, compileRuntime)

task buildWithRuntime(type: Exec) {
        workingDir "${tmpBuildDir}/target/bin"
        commandLine 'jar', 'uf', 'nballerina.jar', 'balrt_inline.bc'
}
buildWithRuntime.dependsOn(copyNbal, copyJNILLVM, copyRuntime, copyDriver,
                        copyDriverOutput, copyLocalDependencies, copyBalConfig, balCompile, compileRuntime)

task cleanBuildArtificats(type: Delete) {
        delete "${tmpBuildDir}/target/bin/balrt_inline.bc"
}
cleanBuildArtificats.mustRunAfter(buildWithRuntime)

task cleanJniConfig(type: Exec) {
        workingDir "${tmpBuildDir}/target/bin"
        commandLine 'zip', '-d', 'nballerina.jar', './META-INF/native-image/*'
}
cleanJniConfig.dependsOn(buildWithRuntime)

task createJniCofig(type: Exec) {
        workingDir "."
        commandLine "bash", "-c", 'find ./modules/jni.llvm -maxdepth 1 -name "*.bal"| xargs python3 jniConfigGen.py'
}

task buildNativeImage(type: Exec) {
        workingDir "${tmpBuildDir}/target/bin"
        commandLine 'native-image',
                    '--no-fallback',
                    '-H:MaxDuplicationFactor=100',
                    '-H:ResourceConfigurationFiles=../../../llvm_jni/resource_config.json',
                    '-H:ReflectionConfigurationFiles=../../../llvm_jni/reflection_config.json',
                    '-H:JNIConfigurationFiles=../../../llvm_jni/jni_config.json,../../../llvm_jni/jni_workaround.json',
                    '-jar',
                    'nballerina.jar'
}
buildNativeImage.dependsOn(buildWithRuntime, createJniCofig, cleanBuildArtificats, cleanJniConfig)

task buildNBalCompilerBase(type: Exec) {
        workingDir compilerDir
        commandLine 'bal', 'build'
}

task compileExpectedTestCases(type: Exec) {
        workingDir testDir
        commandLine './compile.sh'
}
compileExpectedTestCases.dependsOn(buildNBalCompilerBase)

task normalizeExpectedTestCases(type: Exec) {
        workingDir testDir
        commandLine './normalize.sh'
}
normalizeExpectedTestCases.dependsOn(compileExpectedTestCases)

task copyCompatibility_test(type: Copy) {
        from 'compatibility_test'
        into "${tmpBuildDir}/compatibility_test"
}
copyCompatibility_test.dependsOn(testBuild)

task compileActualTestCases(type: Exec) {
        workingDir "${tmpBuildDir}/compatibility_test"
        commandLine './compile-jni.sh'
}
compileActualTestCases.dependsOn(copyCompatibility_test)

task normalizeActualTestCases(type: Exec) {
        workingDir "${tmpBuildDir}/compatibility_test"
        commandLine './normalize.sh'
}
normalizeActualTestCases.dependsOn(compileActualTestCases)

task compareTestCases(type: Exec) {
        workingDir "${tmpBuildDir}/compatibility_test"
        commandLine './compare.sh'
}
compareTestCases.dependsOn(normalizeActualTestCases, normalizeExpectedTestCases)

task cleanTestBuild(type: Delete) {
        delete tmpBuildDir
}
