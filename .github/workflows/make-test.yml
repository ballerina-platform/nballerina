name: Make test

on:
  push:
    branches: [ wback_subset05 ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  
jobs:
  test:
    env:
      JBAL_VERSION: '2201.0.0'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Set LLVM suffix (macOs)
        if: runner.os == 'macOs'
        # default is 12.0.0 but 12.0.1 is available on '$(brew --prefix llvm)/bin/clang'
        run: |
          echo "$(brew --prefix llvm)/bin" >> $GITHUB_PATH
          echo "LLVM_SUFFIX=" >> $GITHUB_ENV
      - name: Cache jBallerina
        id: cache-jbal
        uses: actions/cache@v2
        with:
          path: |
            ~/ballerina-${{ env.JBAL_VERSION }}-*.*
          key: jbal-${{ env.JBAL_VERSION }}-${{ runner.os }}
      - name: Cache Binaryen
        id: cache-binaryen
        uses: actions/cache@v2
        with:
          path: |
            ~/binaryen-105.tar.gz
          key: binaryen-${{ runner.os }}
      - name: Download Binaryen tools deb
        if: steps.cache-binaryen.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          curl -L "https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz" > $HOME/binaryen-105.tar.gz
      - name: Extract Binaryen tools deb
        if: runner.os == 'Linux'
        run: |
          tar -xf $HOME/binaryen-105.tar.gz -C $HOME/
      - name: Download jBallerina deb
        if: steps.cache-jbal.outputs.cache-hit != 'true' && runner.os == 'Linux'
        run: |
          curl -L "https://github.com/ballerina-platform/ballerina-distribution/releases/download/v$JBAL_VERSION/ballerina-$JBAL_VERSION-swan-lake-linux-x64.deb" > $HOME/ballerina-$JBAL_VERSION-swan-lake-linux-x64.deb
      - name: Install jBallerina deb
        if: runner.os == 'Linux'
        run: |
          sudo dpkg -i $HOME/ballerina-$JBAL_VERSION-swan-lake-linux-x64.deb
          echo "/usr/lib/ballerina/bin" >> $GITHUB_PATH
          echo "/usr/lib/ballerina/dependencies/jdk-11.0.8+10-jre/bin/java" >> $GITHUB_PATH
      - name: Download jBallerina pkg
        if: steps.cache-jbal.outputs.cache-hit != 'true' && runner.os == 'macOs'
        run: |
          curl -L "https://github.com/ballerina-platform/ballerina-distribution/releases/download/v$JBAL_VERSION/ballerina-$JBAL_VERSION-swan-lake-macos-x64.pkg" > $HOME/ballerina-$JBAL_VERSION-swan-lake-macos-x64.pkg
      - name: Install jBallerina pkg
        if: runner.os == 'macOs'
        run: |
          installer -pkg  $HOME/ballerina-$JBAL_VERSION-swan-lake-macos-x64.pkg -target CurrentUserHomeDirectory
          chmod +x "$HOME/Library/Ballerina/bin/bal"
          echo "$HOME/Library/Ballerina/bin" >> $GITHUB_PATH
          echo "JAVA=$HOME/Library/Ballerina/dependencies/jdk-11.0.8+10-jre/bin/java" >> $GITHUB_ENV
      - name: Download Binaryen Tools macOs
        if: steps.cache-jbal.outputs.cache-hit != 'true' && runner.os == 'macOs'
        run: |
          curl -L "https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-macos.tar.gz" > $HOME/binaryen-105.tar.gz
          tar -xf $HOME/binaryen-105.tar.gz -C $HOME/
      - name: Extract Binaryen Tools macOs
        if: runner.os == 'macOs'
        run: |
          tar -xf $HOME/binaryen-105.tar.gz -C $HOME/
      - name: Test
        run: |
          echo "useing clang=`which clang` llvm-as=`which llvm-as` bal=`which bal`"
          make -j2 testwat
      - name: Archive test ouput
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: test output
          path: |
            test/outwat
