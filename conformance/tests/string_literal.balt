Test-Case: output
Description: Test basic string literals.
Labels: string

import ballerina/io;
public function main() {
    string a = "Ballerina";
    io:println(a); // @output Ballerina

    string b = "1234";
    io:println(b); // @output 1234

    string c = "{name: Kevin}";
    io:println(c); // @output {name: Kevin}

    io:println("+_)(*&^%$#@!"); // @output +_)(*&^%$#@!
}

Test-Case: parser-error
Description: Test invalid usage of line break in string literal.
Labels: string

function errorFunction() {
    string _ = "First String
                Second String"; // @error line break is not allowed in string value
}

Test-Case: parser-error
Description: Test invalid usage of `\` in string literal.
Labels: string

function errorFunction() {
    string _ = "\"; // @error invalid usage of backslash

    string _ = "Some text\"; // @error invalid usage of backslash
}

Test-Case: error
Description: Test invalid string escape sequence.
Labels: string

function errorFunction() {
    string _ = "Hello \Ballerina"; // @error `\B` is not a valid escape sequence
}

Test-Case: parser-error
Description: Test invalid usage of `"` in string literal.
Labels: string

function errorFunction() {
    string _ = """; // @error double quote is not allowed in string value

    string _ = "First text " Second text"; // @error double quote is not allowed in string value

    string _ = "This is double quote " "; // @error double quote is not allowed in string value
}

Test-Case: output
Description: Test string single escape.
Labels: string, StringSingleEscape

import ballerina/io;
public function main() {
    io:println("Hello \t world"); // @output Hello 	 world
    io:println("Hello\tworld"); // @output Hello	world
    io:println("Hello\t world"); // @output Hello	 world

    io:println("Hello \nworld!"); // @output Hello 
                                  // @output world!
    io:println("Hello\nworld!"); // @output Hello
                                  // @output world!
    io:println("Hello\n world!"); // @output Hello
                                  // @output  world!

    io:println("2 \\ two"); // @output 2 \ two
    io:println("2\\two"); // @output 2\two
    io:println("2\\ two"); // @output 2\ two

    io:println("\"StringValue\""); // @output "StringValue"
    io:println(" \"StringValue \""); // @output  "StringValue "
    io:println("\" StringValue\" "); // @output " StringValue" 
}

Test-Case: output
Description: Test string single escape.
Fail-Issue: ballerina-platform/ballerina-lang #33088
Labels: string, StringSingleEscape

import ballerina/io;
public function main() {
    io:println("12345 world \rHello"); // @output Hello world 
    io:println("12345 world\rHello"); // @output Hello world
    io:println("12345 world\r Hello"); // @output  Hello world
}

Test-Case: output
Description: Test using `\` to esacape numeric escape.
Labels: string

import ballerina/io;
public function main() {
    io:println("\\u{61}"); // @output \u{61}
}

Test-Case: output
Description: Test numeric escape in string literal.
Labels: string

import ballerina/io;
public function main() {
    string a = "a\u{62}c";
    io:println(a); // @output abc

    string b = "Hello \u{000A}world!";
    io:println(b); // @output Hello 
                   // @output world!

    string d = "smile\u{1F642}";
    io:println(d); // @output smile🙂
}

Test-Case: output
Description: Test numeric escape in string literal.
Fail-Issue: ballerina-platform/ballerina-lang#33051
Labels: string

import ballerina/io;
public function main() {
    string c = "A \u{5C} B";
    io:println(c); // @output A \ B
}

Test-Case: output
Description: Test equality of string literals.
Labels: string

import ballerina/io;
public function main() {
    io:println("Car" == "\u{0043}\u{0061}\u{0072}"); // @output true

    io:println("\n" == "\u{000A}"); // @output true

    io:println("\t" == "\u{0009}"); // @output true

    io:println("\t" == "	"); // @output true

    io:println("\n" != "\u{000A}"); // @output false
}

Test-Case: output
Description: Test exact equality of string literals.
Labels: exact-equality, string

import ballerina/io;
public function main() {
    io:println("\n" === "\u{000A}"); // @output true

    io:println("COde" !== "COde"); // @output false
}

Test-Case: error
Description: Test invalid hex digit in code point.
Labels: string

function errorFunction() {
    string _ = "\u{AG}"; // @error `G` is not a valid hex digit
}

Test-Case: error
Description: Test surrogate code points in string literal.
Labels: string

function errorFunction() {
    string _ = "\u{D800}"; // @error surrogate code points are not allowed
    string _ = "\u{D89F}"; // @error surrogate code points are not allowed
    string _ = "\u{DABF}"; // @error surrogate code points are not allowed
    string _ = "\u{DFFF}"; // @error surrogate code points are not allowed
}

Test-Case: output
Description: Test Unicode noncharacters in string literal.
Labels: string

import ballerina/io;
public function main() {
    string a = "\u{FFFF}";
    io:println(a); // @output ￿

    string b = "\u{FFFE}";
    io:println(b); // @output ￾
}

Test-Case: output
Description: Test concatenation of strings that will result in a value looks like numeric escape.
Labels: additive-expr, string

import ballerina/io;
public function main() {
    string a = "\\" + "u{61}";
    io:println(a); // @output \u{61}
}

Test-Case: output
Description: Test string literal in argument context.
Labels: function-call-expr, function-defn, string

import ballerina/io;
public function main() {
    printStringLiteral("Spec Tests"); // @output Spec Tests

    printStringLiteral(")(*&^%$#><:~~!`"); // @output )(*&^%$#><:~~!`

    printStringLiteral("12345\t\u{0039}"); // @output 12345	9

    printStringLiteral("This code point first appeared in version 1.1 of the Unicode® Standard and belongs to the \"Basic Latin\" block which goes from 0x0 to 0x7F."); // @output This code point first appeared in version 1.1 of the Unicode® Standard and belongs to the "Basic Latin" block which goes from 0x0 to 0x7F.
}

function printStringLiteral(string str) {
    io:println(str);
}

Test-Case: output
Description: Test string literal in type test expression context.
Labels: is-expr, string

import ballerina/io;
public function main() {
    io:println("Book" is string); // @output true

    io:println("1234" !is string); // @output false

    io:println("\t\n\r\\" is string); // @output true
}

Test-Case: output
Description: Test string literal in return statement context.
Labels: string, return-stmt

import ballerina/io;
public function main() {
    io:println(getString1()); // @output Returned String

    io:println(getString2()); // @output One 
                              // @output Two	245

    io:println(getString3()); // @output RBG
}

function getString1() returns string {
    return "Returned String";
}

function getString2() returns string {
    return "One \nTwo\t245";
}

function getString3() returns string {
    return "\u{0052}B\u{0047}";
}

Test-Case: output
Description: Test string literal in type definition context.
Labels: module-type-defn, string

import ballerina/io;
type STRING_NAME "NAME";

public function main() {
    STRING_NAME a = "NAME";
    io:println(a); // @output NAME
}

