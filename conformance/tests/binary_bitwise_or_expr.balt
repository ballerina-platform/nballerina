Test-Case: parser-error
Description: Test syntax errors in bitwise or expression.
Labels: binary-bitwise-expr, DecimalNumber

public function main() {
    int _ = | 434343; // @error missing LHS operand
    int _ = 34665677665 | ; // @error missing RHS operand
}

Test-Case: output
Description: Test basic bitwise or expression.
Labels: binary-bitwise-expr, DecimalNumber

import ballerina/io;
public function main() {
    io:println(9 | 6); // @output 15
    io:println(6 | 9); // @output 15
    io:println(99999999 | 6); // @output 99999999
    io:println(5 | 7568888); // @output 7568893
    io:println(54545 | 7568888); // @output 7601657
    io:println(545454434 | 987454332); // @output 987495294

    io:println(9223372036854775807 | 9223372036854775807); // @output 9223372036854775807
    io:println(9223372036854775807 | 3); // @output 9223372036854775807
}

Test-Case: output
Description: Test basic bitwise or expression using HexIntLiteral.
Labels: binary-bitwise-expr, DecimalNumber, HexIntLiteral

import ballerina/io;
public function main() {
    io:println(0xAB55 | 0x0032); // @output 43895
    io:println(0xABF5 | 50); // @output 44023
    io:println(645 | 0xDBF5); // @output 56309
}

Test-Case: output
Description: Test basic bitwise or expression with negative integer values.
Labels: binary-bitwise-expr, DecimalNumber, unary-minus

import ballerina/io;
public function main() {
    io:println(-89 | 6); // @output -89
    io:println(6 | -9); // @output -9
    io:println(-43554 | -6); // @output -2

    io:println(-9223372036854775807 | -9223372036854775807); // @output -9223372036854775807
    io:println(-9223372036854775807 | 3); // @output -9223372036854775805
    io:println(-9223372036854775807 | 9223372036854775807); // @output -1
}

Test-Case: output
Description: Test basic bitwise or expression for negative integer values using HexIntLiteral.
Labels: binary-bitwise-expr, DecimalNumber, HexIntLiteral, unary-minus

import ballerina/io;
public function main() {
    io:println(0xDB55 | -0x0032); // @output -33
    io:println(-0x1C55 | -0x123F); // @output -4117
    io:println(-0xABF5 | -540); // @output -529
    io:println(5656 | -0XBCDE); // @output -43206
    io:println(5656 | 0XBCDE); // @output 48862
}

Test-Case: output
Description: Test bitwise or expression where the operands are a subtype of int using byte.
Labels: binary-bitwise-expr, byte, int

import ballerina/io;
public function main() {
    int a = 987996;
    byte b = 54;
    byte c = 99;

    io:println(a | b); // @output 988030
    io:println(b | a); // @output 988030
    io:println(b | c); // @output 119
    io:println(c | b); // @output 119
    io:println(c | c); // @output 99
}

Test-Case: output
Description: Test bitwise or expression where the operands are a subtype of int using Signed32.
Labels: binary-bitwise-expr, int, int:Signed32, unary-minus

import ballerina/io;
public function main() {
    int a = 987996;
    int:Signed32 b = 54;
    int:Signed32 c = 5454545;
    int:Signed32 d = -341345678;

    io:println(a | b); // @output 988030
    io:println(b | a); // @output 988030
    io:println(b | c); // @output 5454583
    io:println(c | b); // @output 5454583
    io:println(c | c); // @output 5454545
    io:println(d | d); // @output -341345678
    io:println(c | d); // @output -336102669
}

Test-Case: output
Description: Test bitwise or expression where the operands are a subtype of int using Signed16.
Labels: binary-bitwise-expr, int, int:Signed16, unary-minus

import ballerina/io;
public function main() {
    int a = 387953196;
    int:Signed16 b = 987;
    int:Signed16 c = 7764;
    int:Signed16 d = -9876;

    io:println(a | b); // @output 387953663
    io:println(b | a); // @output 387953663
    io:println(b | c); // @output 8159
    io:println(c | b); // @output 8159
    io:println(c | c); // @output 7764
    io:println(d | d); // @output -9876
    io:println(c | d); // @output -8324
}

Test-Case: output
Description: Test bitwise or expression where the operands are a subtype of int using Signed8.
Labels: binary-bitwise-expr, int, int:Signed8, unary-minus

import ballerina/io;
public function main() {
    int a = 387953196;
    int:Signed8 b = 97;
    int:Signed8 c = 64;
    int:Signed8 d = -23;

    io:println(a | b); // @output 387953261
    io:println(b | a); // @output 387953261
    io:println(b | c); // @output 97
    io:println(c | b); // @output 97
    io:println(c | c); // @output 64
    io:println(d | d); // @output -23
    io:println(c | d); // @output -23
}

Test-Case: output
Description: Test bitwise or expression where the operands are a subtype of int using Unsigned32.
Labels: binary-bitwise-expr, int, int:Unsigned32

import ballerina/io;
public function main() {
    int a = 987996;
    int:Unsigned32 b = 54;
    int:Unsigned32 c = 5454545;

    io:println(a | b); // @output 988030
    io:println(b | a); // @output 988030
    io:println(b | c); // @output 5454583
    io:println(c | b); // @output 5454583
    io:println(c | c); // @output 5454545
}

Test-Case: output
Description: Test bitwise or expression where the operands are a subtype of int using Unsigned16.
Labels: binary-bitwise-expr, int, int:Unsigned16

import ballerina/io;
public function main() {
    int a = 387953196;
    int:Unsigned16 b = 987;
    int:Unsigned16 c = 7764;

    io:println(a | b); // @output 387953663
    io:println(b | a); // @output 387953663
    io:println(b | c); // @output 8159
    io:println(c | b); // @output 8159
    io:println(c | c); // @output 7764
}

Test-Case: output
Description: Test bitwise or expression where the operands are a subtype of int using Unsigned8.
Labels: binary-bitwise-expr, int, int:Unsigned8

import ballerina/io;
public function main() {
    int a = 387953196;
    int:Unsigned8 b = 97;
    int:Unsigned8 c = 64;

    io:println(a | b); // @output 387953261
    io:println(b | a); // @output 387953261
    io:println(b | c); // @output 97
    io:println(c | b); // @output 97
    io:println(c | c); // @output 64
}

Test-Case: output
Description: Test bitwise or expression where the operands are a subtype of int.
Labels: binary-bitwise-expr, byte, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, unary-minus

import ballerina/io;
public function main() {
    int a = 43;

    byte b = 5;

    int:Signed32 c = -21474836;
    int:Signed16 d = -454;
    int:Signed8 e = 100;

    int:Unsigned32 f = 21474836;
    int:Unsigned16 g = 54522;
    int:Unsigned8 h = 255;

    io:println(a | b); // @output 47
    io:println(a | c); // @output -21474833
    io:println(a | d); // @output -453
    io:println(a | e); // @output 111
    io:println(a | f); // @output 21474879
    io:println(a | g); // @output 54523
    io:println(a | h); // @output 255

    io:println(b | b); // @output 5
    io:println(b | c); // @output -21474835
    io:println(b | d); // @output -449
    io:println(b | e); // @output 101
    io:println(b | f); // @output 21474837
    io:println(b | g); // @output 54527
    io:println(b | h); // @output 255

    io:println(c | c); // @output -21474836
    io:println(c | d); // @output -2
    io:println(c | e); // @output -21474836
    io:println(c | f); // @output -4
    io:println(c | g); // @output -21441026
    io:println(c | h); // @output -21474817

    io:println(d | d); // @output -454
    io:println(d | e); // @output -386
    io:println(d | f); // @output -450
    io:println(d | g); // @output -262
    io:println(d | h); // @output -257

    io:println(e | e); // @output 100
    io:println(e | f); // @output 21474932
    io:println(e | g); // @output 54526
    io:println(e | h); // @output 255

    io:println(f | f); // @output 21474836

    io:println(g | g); // @output 54522

    io:println(h | h); // @output 255
}

Test-Case: error
Description: Test the static type of both operands must be a subtype of int via invalid numeric operand types.
Labels: binary-bitwise-expr, DecimalNumber, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix

function errorFunction() {
    float a = 545.5;
    float b = 5945.5;
    
    int _ = 5 | 7.5; // @error static type of both operands must be a subtype of int

    int _ = 433.4 | 7.5; // @error static type of both operands must be a subtype of int

    int _ = 434.446e+2f | 95.446e+2f; // @error static type of both operands must be a subtype of int

    int _ = 433d | 7d; // @error static type of both operands must be a subtype of int

    int _ = a | b; // @error static type of both operands must be a subtype of int

    int _ = getFloat1() | getFloat2(); // @error static type of both operands must be a subtype of int
}

function getFloat1() returns float {
    return 99.4;
}

function getFloat2() returns float {
    return 43.8;
}

Test-Case: error
Description: Test the static type of both operands must be a subtype of int via invalid other operand types.
Labels: binary-bitwise-expr, list-constructor-expr, mapping-constructor-expr, map-type, nil-literal, string

function errorFunction() {
    map<int> a = {};
    map<int> b = {};

    int _ = () | (); // @error static type of both operands must be a subtype of int

    int _ = "5" | "6"; // @error static type of both operands must be a subtype of int

    int _ = [1] | [2]; // @error static type of both operands must be a subtype of int

    int _ = {name: "mike"} | {name: "Jone"}; // @error static type of both operands must be a subtype of int

    int _ = a | b; // @error static type of both operands must be a subtype of int
}

Test-Case: error
Description: Test error in bitwise or expression where the operands are user-defined type T
             where the T is not a subtype of int.
Labels: binary-bitwise-expr, DecimalNumber, decimal, int, module-type-defn, union-type

type MyType int|decimal;

function errorFunction() {
    MyType a = 5;
    MyType b = 433;
    int c = 765;

    int _ = a | b; // @error MyType is not a subtype of int
    int _ = a | 12345; // @error MyType is not a subtype of int
    int _ = b | c; // @error MyType is not a subtype of int
    int _ = a | c; // @error MyType is not a subtype of int
}

Test-Case: output
Description: Test if the type of both operands is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K with Unsigned32.
Labels: binary-bitwise-expr, int:Unsigned32

import ballerina/io;
public function main() {
    int:Unsigned32 c = 9994444;
    int:Unsigned32 d = 999999999;
    printResult(c | d); // @output 999999999
}

function printResult(int:Unsigned32 result) {
    io:println(result);
}

Test-Case: output
Description: Test if the type of both operands is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K with Unsigned16.
Labels: binary-bitwise-expr, int:Unsigned16

import ballerina/io;
public function main() {
    int:Unsigned16 c = 43343;
    int:Unsigned16 d = 213;
    printResult(c | d); // @output 43487
}

function printResult(int:Unsigned16 result) {
    io:println(result);
}

Test-Case: output
Description: Test if the type of both operands is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K with Unsigned8.
Labels: binary-bitwise-expr, int:Unsigned8

import ballerina/io;
public function main() {
    int:Unsigned8 c = 94;
    int:Unsigned8 d = 99;
    printResult(c | d); // @output 127
}

function printResult(int:Unsigned8 result) {
    io:println(result);
}

Test-Case: output
Description: Test if the type of both operands is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K.
Labels: binary-bitwise-expr, int:Unsigned8, int:Unsigned16, int:Unsigned32

import ballerina/io;
public function main() {
    int:Unsigned32 a = 5454;
    int:Unsigned16 b = 4344;
    int:Unsigned32 c = a | b;
    io:println(c); // @output 5630

    int:Unsigned8 d = 44;
    int:Unsigned16 e = 123;
    int:Unsigned16 g = d | e;
    io:println(g); // @output 127

    int:Unsigned32 h = 65;
    int:Unsigned8 i = 2;
    int:Unsigned32 j = h | i;
    io:println(j); // @output 67

    int:Unsigned32 k = 548677654;
    int:Unsigned16 m = 4344;
    int:Unsigned32 n = k | m;
    io:println(n); // @output 548681982

    int:Unsigned8 p = 44;
    int:Unsigned16 q = 9876;
    int:Unsigned16 r = p | q;
    io:println(r); // @output 9916

    int:Unsigned32 s = 5343435;
    int:Unsigned8 t = 2;
    int:Unsigned32 u = s | t;
    io:println(u); // @output 5343435
}

Test-Case: output
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K when at least type of one operand is a 
             singleton.
Fail-Issue: ballerina-platform/ballerina-lang#35458
Labels: binary-bitwise-expr, byte, int:Unsigned8, int:Unsigned16, int:Unsigned32

import ballerina/io;
public function main() {
    int r = 5454;
    2 s = 2;
    int:Unsigned8 t = r | s;
    io:println(t); // @output 5454

    256 u = 256;
    int:Unsigned16 v = r | u;
    io:println(v); // @output 5454

    545444 w = 545444;
    int:Unsigned32 x = r | w;
    io:println(x); // @output 546798

    int:Unsigned16 y = s | u;
    io:println(y); // @output 2

    int:Unsigned32 z = s | w;
    io:println(z); // @output 6
}

Test-Case: error
Description: Test if the type of both operands is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K using invalid assignment.
Labels: binary-bitwise-expr, byte, int, int:Signed8, int:Signed16, int:Unsigned8, int:Unsigned16, int:Unsigned32

function errorFunction() {
    int a = 4343;
    int b = 8;
    int:Unsigned32 _ = a | b; // @error the static type of the result is int

    int d = 9876;
    int:Unsigned32 e = 5454;
    int:Unsigned16 _ = d | e; // @error the static type of the result is int

    int g = 9876;
    int:Unsigned16 h = 5454;
    int:Unsigned8 _ = g | h; // @error the static type of the result is int

    byte _ = g | h; // @error the static type of the result is int

    int:Signed8 k = 12;
    int:Signed16 m = 4434;
    int:Signed8 _ = k | m; // @error the static type of the result is int

    int:Unsigned16 n = 12;
    int:Unsigned16 p = 4434;
    int:Signed16 _ = n | p; // @error the static type of the result is Unsigned16

    int:Unsigned32 q = 12;
    int:Unsigned16 r = 4434;
    int:Unsigned8 _ = q | r; // @error the static type of the result is Unsigned32
    
    int:Unsigned32 s = 4343;
    int:Unsigned16 t = 8;
    int:Unsigned16 _ = s | t; // @error the static type of the result is Unsigned32

    int:Unsigned16 u = 4343;
    int:Unsigned8 v = 8;
    int:Unsigned8 _ = u | v; // @error the static type of the result is Unsigned16

    int:Unsigned16 w = 4343;
    int:Unsigned8 x = 8;
    byte _ = w | x; // @error the static type of the result is Unsigned16
}

Test-Case: output
Description: Test nil lifting for bitwise or operator.
Labels: binary-bitwise-expr, byte, int, int:Signed8, int:Signed16, int:Signed32, int:Unsigned8, int:Unsigned16, int:Unsigned32, numeric-nil-lifting, optional-type, unary-minus

import ballerina/io;
public function main() {
    int? a = 43;

    byte? b = 5;

    int:Signed32? c = -21474836;
    int:Signed16? d = -454;
    int:Signed8? e = 100;

    int:Unsigned32? f = 21474836;
    int:Unsigned16? g = 54522;
    int:Unsigned8? h = 255;

    printResult(a | b); // @output 47
    printResult(a | c); // @output -21474833
    printResult(a | d); // @output -453
    printResult(a | e); // @output 111
    printResult(a | f); // @output 21474879
    printResult(a | g); // @output 54523
    printResult(a | h); // @output 255

    printResult(b | b); // @output 5
    printResult(b | c); // @output -21474835
    printResult(b | d); // @output -449
    printResult(b | e); // @output 101

    printResult(c | c); // @output -21474836
    printResult(c | d); // @output -2
    printResult(c | e); // @output -21474836
    printResult(c | f); // @output -4
    printResult(c | g); // @output -21441026
    printResult(c | h); // @output -21474817

    printResult(d | d); // @output -454
    printResult(d | e); // @output -386
    printResult(d | f); // @output -450
    printResult(d | g); // @output -262
    printResult(d | h); // @output -257

    printResult(e | e); // @output 100
    printResult(e | f); // @output 21474932
    printResult(e | g); // @output 54526
    printResult(e | h); // @output 255

    printResult(f | f); // @output 21474836

    printResult(g | g); // @output 54522

    printResult(h | h); // @output 255
}

function printResult(int? result) {
    io:println(result);
}

Test-Case: output
Description: Test bitwise or expression where the operands are user-defined type T where the T is a subtype of int.
Labels: binary-bitwise-expr, byte, int, module-type-defn, int:Signed8, int:Signed32, int:Unsigned16, int:Unsigned32, singleton-type, unary-minus, union-type

import ballerina/io;
type MyType int;

type MyType2 int:Signed32|int:Unsigned16;

type MyType3 int:Unsigned32|int:Signed8;

type MyType4 byte|int:Signed8;

type MyUnionType MyType2|MyType4;

public function main() {
    MyType a = 5;
    MyType b = 433;
    int c = 765;
    MyType2 d = 4344;
    MyType3 e = -34;
    MyType4 f = -76;
    MyUnionType g = 75;

    printResult(a | b); // @output 437
    printResult(a | 12345); // @output 12349
    printResult(a | c); // @output 765
    printResult(a | d); // @output 4349
    printResult(a | e); // @output -33
    printResult(a | f); // @output -75
    printResult(a | g); // @output 79

    printResult(b | b); // @output 433
    printResult(b | 12345); // @output 12729
    printResult(b | c); // @output 1021
    printResult(b | d); // @output 4601
    printResult(b | e); // @output -1
    printResult(b | f); // @output -75
    printResult(b | g); // @output 507

    printResult(c | c); // @output 765
    printResult(c | d); // @output 4861
    printResult(c | e); // @output -1
    printResult(c | f); // @output -3
    printResult(c | g); // @output 767

    printResult(d | d); // @output 4344
    printResult(d | e); // @output -2
    printResult(d | f); // @output -4
    printResult(d | g); // @output 4347
    
    printResult(e | e); // @output -34
    printResult(e | f); // @output -2
    printResult(e | g); // @output -33
    
    printResult(f | f); // @output -76
    printResult(f | g); // @output -1
    
    printResult(g | g); // @output 75
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test bitwise or expression where the operands are user-defined type T where the T is a subtype of int 
             when the type of at least on operand is a singleton.
Fail-Issue: ballerina-platform/ballerina-lang#35458
Labels: binary-bitwise-expr, byte, int, module-type-defn, int:Signed8, int:Signed32, int:Unsigned16, int:Unsigned32, singleton-type, unary-minus, union-type

import ballerina/io;
type MyType int;

type MyType2 int:Signed32|int:Unsigned16;

type MyType3 int:Unsigned32|int:Signed8;

type MyType4 byte|int:Signed8;

type MyUnionType MyType2|MyType4;

type MySingletonUnionType 1|2|3;

type MySingletonUnionType2 1|256;

type MySingletonUnionType3 1|545444;

public function main() {
    MyType a = 5;
    MyType b = 433;
    int c = 765;
    MyType2 d = 4344;
    MyType3 e = -34;
    MyType4 f = -76;
    MyUnionType g = 75;

    MySingletonUnionType h = 2;
    MySingletonUnionType2 i = 256;
    MySingletonUnionType3 j = 545444;

    int:Unsigned8 var1 = a | h;
    io:println(var1); // @output 7
    int:Unsigned16 var2 = a | i;
    io:println(var2); // @output 261
    int:Unsigned32 var3 = a | j;
    io:println(var3); // @output 545445

    int:Unsigned8 var4 = b | h;
    io:println(var4); // @output 435
    int:Unsigned16 var5 = b | i;
    io:println(var5); // @output 433
    int:Unsigned32 var6 = b | j;
    io:println(var6); // @output 545717

    int:Unsigned8 var7 = c | h;
    io:println(var7); // @output 767
    int:Unsigned16 var8 = c | i;
    io:println(var8); // @output 1021
    int:Unsigned32 var9 = c | j;
    io:println(var9); // @output 545533

    int:Unsigned8 var10 = d | h;
    io:println(var10); // @output 4346
    int:Unsigned16 var11 = d | i;
    io:println(var11); // @output 4600
    int:Unsigned32 var12 = d | j;
    io:println(var12); // @output 545532

    int:Unsigned8 var13 = e | h;
    io:println(var13); // @output -34
    int:Unsigned16 var14 = e | i;
    io:println(var14); // @output -34
    int:Unsigned32 var15 = e | j;
    io:println(var15); // @output -2

    int:Unsigned8 var16 = f | h;
    io:println(var16); // @output -74
    int:Unsigned16 var17 = f | i;
    io:println(var17); // @output -76
    int:Unsigned32 var18 = f | j;
    io:println(var18); // @output -76

    int:Unsigned8 var19 = g | h;
    io:println(var19); // @output 75
    int:Unsigned16 var20 = g | i;
    io:println(var20); // @output 331
    int:Unsigned32 var21 = g | j;
    io:println(var21); // @output 545519

    int:Unsigned8 var22 = h | h;
    io:println(var22); // @output 2
    int:Unsigned16 var23 = h | i;
    io:println(var23); // @output 258
    int:Unsigned32 var24 = h | j;
    io:println(var24); // @output 545446
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test module constant reference expression as operands.
Labels: binary-bitwise-expr, byte, int, module-const-decl, unary-minus

import ballerina/io;
const VALUE1 = 5;
const VALUE2 = 43433;

const int VALUE4 = 654454;
const byte VALUE5 = 65;

public function main() {
    int value3 = -9876533;

    printResult(VALUE1 | VALUE2); // @output 43437
    printResult(VALUE1 | value3); // @output -9876529
    printResult(value3 | VALUE2); // @output -9835541
    printResult(VALUE1 | VALUE1); // @output 5
    printResult(VALUE2 | VALUE2); // @output 43433

    printResult(VALUE1 | VALUE4); // @output 654455
    printResult(VALUE1 | VALUE5); // @output 69
    printResult(value3 | VALUE5); // @output -9876533
    printResult(VALUE5 | VALUE5); // @output 65
    printResult(VALUE4 | VALUE4); // @output 654454
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test float literal as operands with type cast.
Labels: any, binary-bitwise-expr, DecimalFloatingPointNumber, int, float, type-cast-expr

import ballerina/io;
public function main() {
    float a = 4.6434;
    float b = 53;
    printResult(<int>a | <int>b); // @output 53

    int c = 54322;
    float d = 7.3;
    printResult(c | <int>d); // @output 54327
    printResult(<int>d | c); // @output 54327

    any e = 65.65;
    any f = 1235.465;
    printResult(<int> e | <int> f); // @output 1235
    printResult(<int> a | <int> e); // @output 71
    printResult(<int> f | c); // @output 54515
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test member access expression as operands.
Labels: array-type, binary-bitwise-expr, int, list-constructor-expr, member-access-expr

import ballerina/io;
public function main() {
    int[] a = [33, 22, 535334343];

    printResult(a[0] | a[1]); // @output 55
    printResult(a[0] | a[2]); // @output 535334375
    printResult(a[1] | a[2]); // @output 535334359
    printResult(a[2] | a[2]); // @output 535334343
    printResult(a[2] | 0); // @output 535334343
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test function call expression as operands.
Labels: binary-bitwise-expr, function-call-expr, int

import ballerina/io;
public function main() {
    int a = getInt() | getInt();
    io:println(a); // @output 43

    int b = getInt() | getInt16();
    io:println(b); // @output 939

    int c = getInt() | getInt32();
    io:println(c); // @output 44331

    int d = getInt16() | getInt32();
    io:println(d); // @output 44963
}

function getInt() returns int {
    return 43;
}

function getInt32() returns int:Signed32 {
    return 44322;
}

function getInt16() returns int:Signed16 {
    return 897;
}

Test-Case: output
Description: Test multiplicative expression as operands.
Labels: binary-bitwise-expr, DecimalNumber, multiplicative-expr

import ballerina/io;
public function main() {
    printResult((54 * 5) | (534 * 2)); // @output 1326
    printResult(54 * 5 | 534 * 2); // @output 1326

    printResult((54 / 5) | (534 / 2)); // @output 267
    printResult(54 / 5 | 534 / 2); // @output 267

    printResult((54 % 5) | (534 % 2)); // @output 4
    printResult(54 % 5 | 534 % 2); // @output 4

    printResult(43 | 534 % 8); // @output 47
    printResult(43 | (534 % 8)); // @output 47

    printResult(54 % 5 | 534); // @output 534
    printResult((54 % 5) | 534); // @output 534
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test additive expression as operands.
Labels: additive-expr, DecimalNumber, binary-bitwise-expr

import ballerina/io;
public function main() {
    printResult((54 + 5) | (534 + 2)); // @output 571
    printResult(54 + 5 | 534 + 2); // @output 571

    printResult((54 - 5) | (534 - 2)); // @output 565
    printResult(54 - 5 | 534 - 2); // @output 565

    printResult(43 | 534 + 8); // @output 575
    printResult(43 | (534 + 8)); // @output 575

    printResult(54 - 5 | 534); // @output 567
    printResult((54 - 5) | 534); // @output 567
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test shift expression as operands.
Labels: binary-bitwise-expr, DecimalNumber, shift-expr, unary-minus

import ballerina/io;
public function main() {
    printResult((54 << 1) | (534 << 2)); // @output 2172
    printResult(54 << 1 | 534 << 2); // @output 2172

    printResult((54 >> 1) | (534 >> 1)); // @output 283
    printResult(54 >> 1 | 534 >> 1); // @output 283

    printResult((-54 >>> 1) | (-534 >>> 1)); // @output 9223372036854775797
    printResult(-54 >>> 1 | -534 >>> 1); // @output 9223372036854775797

    printResult(43 | 534 << 2); // @output 2171
    printResult(43 | (534 << 2)); // @output 2171

    printResult(54 >> 5 | 534); // @output 535
    printResult((54 >> 5) | 534); // @output 535
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test bitwise expression as operands.
Labels: binary-bitwise-expr, DecimalNumber

import ballerina/io;
public function main() {
    printResult(54 | 5 | 534 | 2); // @output 567
    printResult(((54 | 5) | 534) | 2); // @output 567

    printResult(54 ^ 1 | 534 ^ 1); // @output 567
    printResult((54 ^ 1) | (534 ^ 1)); // @output 567

    printResult(767 & 1 | 934 & 1); // @output 1
    printResult((767 & 1) | (934 & 1)); // @output 1

    printResult(43 | 534 | 2); // @output 575
    printResult((43 | 534) | 2); // @output 575

    printResult(54 & 5 | 534); // @output 534
    printResult((54 & 5) | 534); // @output 534

    printResult(4341 & 1 | 234 ^ 1); // @output 235
    printResult((4341 & 1) | (234 ^ 1)); // @output 235
}

function printResult(int result) {
    io:println(result);
}

