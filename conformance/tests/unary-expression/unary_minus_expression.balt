Test-Case: output
Description: Test unary negative expression for positive integers with no overflow scenarios.
Labels: DecimalNumber, int, unary-minus

import ballerina/io;
public function main() {
   int a = 1;
   int b = 101;
   int c = 0;
   int d = 9223372036854775807;
   io:println(-a); // @output -1
   io:println(-b); // @output -101
   io:println(-c); // @output 0
   io:println(-d); // @output -9223372036854775807
}

Test-Case: output
Description: Test unary negative for integer is equal to subtraction from zero.
Labels: additive-expr, DecimalNumber, int, unary-minus

import ballerina/io;
public function main() {
   int a = 5;
   io:println(-a == (0 - a)); // @output true

   int b = 5;
   io:println(-b == (0 - b)); // @output true

   int c = -10;
   io:println(-c == (0 - c)); // @output true

   int d = 0;
   io:println(-d == (0 - d)); // @output true
}

Test-Case: output
Description: Test unary negation expression using HexIntLiteral.
Labels: HexIntLiteral, unary-minus

import ballerina/io;
public function main() {
   io:println(-0xAB55); // @output -43861
   io:println(-0xABF5); // @output -44021
   io:println(-0xDBF5); // @output -56309
}

Test-Case: output
Description: Test unary negative expression for negative integers with no overflow scenarios.
Labels: DecimalNumber, int, signed-zero, unary-minus

import ballerina/io;
public function main() {
   int a = -1;
   int b = -101;
   int c = -0;
   int d = -9223372036854775807;
   io:println(-a); // @output 1
   io:println(-b); // @output 101
   io:println(-c); // @output 0
   io:println(-d); // @output 9223372036854775807
}

Test-Case: panic
Description: Test unary negative overflow for int.
Fail-Issue: ballerina-platform/ballerina-lang#32922
Labels: additive-expr, DecimalNumber, int, unary-minus

public function main() {
   int a = -9223372036854775807;
   int _ = -(a - 1); // @panic integer overflow on unary negative
}

Test-Case: output
Description: Test unary negative expression for positive int:Unsigned8 with no overflow scenarios.
Labels: DecimalNumber, int:Unsigned8, unary-minus

import ballerina/io;
public function main() {
   int:Unsigned8 a = 1;
   int:Unsigned8 b = 2;
   int:Unsigned8 c = 101;
   int:Unsigned8 d = 255;

   io:println(-a); // @output -1
   io:println(-b); // @output -2
   io:println(-c); // @output -101
   io:println(-d); // @output -255
}

Test-Case: output
Description: Test unary negative expression for positive byte with no overflow scenarios.
Labels: byte, DecimalNumber, unary-minus

import ballerina/io;
public function main() {
   byte a = 1;
   byte b = 2;
   byte c = 101;
   byte d = 255;

   io:println(-a); // @output -1
   io:println(-b); // @output -2
   io:println(-c); // @output -101
   io:println(-d); // @output -255
}

Test-Case: output
Description: Test unary negative expression for positive int:Unsigned16 with no overflow scenarios.
Labels: DecimalNumber, int:Unsigned16, unary-minus

import ballerina/io;
public function main() {
   int:Unsigned16 a = 1;
   int:Unsigned16 b = 2;
   int:Unsigned16 c = 40123;
   int:Unsigned16 d = 65535;

   io:println(-a); // @output -1
   io:println(-b); // @output -2
   io:println(-c); // @output -40123
   io:println(-d); // @output -65535
}

Test-Case: output
Description: Test unary negative expression for positive int:Unsigned32 with no overflow scenarios.
Labels: DecimalNumber, int:Unsigned32, unary-minus

import ballerina/io;
public function main() {
   int:Unsigned32 a = 1;
   int:Unsigned32 b = 2;
   int:Unsigned32 c = 40123;
   int:Unsigned32 d = 429496729;

   io:println(-a); // @output -1
   io:println(-b); // @output -2
   io:println(-c); // @output -40123
   io:println(-d); // @output -429496729
}

Test-Case: output
Description: Test unary negative expression for positive int:Signed8 with no overflow scenarios.
Labels: DecimalNumber, int:Signed8, unary-minus

import ballerina/io;
public function main() {
   int:Signed8 a = 1;
   int:Signed8 b = 2;
   int:Signed8 c = 101;
   int:Signed8 d = 127;

   io:println(-a); // @output -1
   io:println(-b); // @output -2
   io:println(-c); // @output -101
   io:println(-d); // @output -127
}

Test-Case: output
Description: Test unary negative expression for negative int:Signed8 with no overflow scenarios.
Labels: DecimalNumber, int:Signed8, unary-minus

import ballerina/io;
public function main() {
   int:Signed8 a = -1;
   int:Signed8 b = -2;
   int:Signed8 c = -101;
   int:Signed8 d = -128;

   io:println(-a); // @output 1
   io:println(-b); // @output 2
   io:println(-c); // @output 101
   io:println(-d); // @output 128
}

Test-Case: output
Description: Test unary negative expression for positive int:Signed16 with no overflow scenarios.
Labels: DecimalNumber, int:Signed16, unary-minus

import ballerina/io;
public function main() {
   int:Signed16 a = 1;
   int:Signed16 b = 2;
   int:Signed16 c = 12345;
   int:Signed16 d = 32767;

   io:println(-a); // @output -1
   io:println(-b); // @output -2
   io:println(-c); // @output -12345
   io:println(-d); // @output -32767
}

Test-Case: output
Description: Test unary negative expression for negative int:Signed16 with no overflow scenarios.
Labels: DecimalNumber, int:Signed16, unary-minus

import ballerina/io;
public function main() {
   int:Signed16 a = -1;
   int:Signed16 b = -2;
   int:Signed16 c = -12345;
   int:Signed16 d = -32768;

   io:println(-a); // @output 1
   io:println(-b); // @output 2
   io:println(-c); // @output 12345
   io:println(-d); // @output 32768
}

Test-Case: output
Description: Test unary negative expression for positive int:Signed32 with no overflow scenarios.
Labels: DecimalNumber, int:Signed32, unary-minus

import ballerina/io;
public function main() {
   int:Signed32 a = 1;
   int:Signed32 b = 2;
   int:Signed32 c = 40123;
   int:Signed32 d = 2147483647;

   io:println(-a); // @output -1
   io:println(-b); // @output -2
   io:println(-c); // @output -40123
   io:println(-d); // @output -2147483647
}

Test-Case: output
Description: Test unary negative expression for negative int:Signed32 with no overflow scenarios.
Labels: DecimalNumber, int:Signed32, unary-minus

import ballerina/io;
public function main() {
   int:Signed32 a = -1;
   int:Signed32 b = -2;
   int:Signed32 c = -40123;
   int:Signed32 d = -2147483648;

   io:println(-a); // @output 1
   io:println(-b); // @output 2
   io:println(-c); // @output 40123
   io:println(-d); // @output 2147483648
}

Test-Case: output
Description: Test unary negative expression for user-defined sub-types of positive int with
             no overflow scenarios.
Labels: DecimalNumber, module-type-defn, singleton-type, unary-minus, union-type

import ballerina/io;
type Ints -2|-1|0|1|2;

public function main() {
   Ints a = 1;
   Ints b = 2;
   Ints c = 0;

   io:println(-a); // @output -1
   io:println(-b); // @output -2
   io:println(-c); // @output 0
}

Test-Case: output
Description: Test unary negative expression for negative user-defined sub-types of int with
             no overflow scenarios.
Labels: DecimalNumber, module-type-defn, singleton-type, unary-minus, union-type

import ballerina/io;
type Ints -2|-1|0|1|2;

public function main() {
   Ints a = -1;
   Ints b = -2;

   io:println(-a); // @output 1
   io:println(-b); // @output 2
}

Test-Case: output
Description: Test unary negative expression for user-defined subtypes of integer built-in subtypes with
             no overflow scenarios.
Labels: DecimalNumber, int:Signed8, int:Unsigned32, module-type-defn, unary-minus, union-type

import ballerina/io;
type Ints int:Signed8|int:Unsigned32;

public function main() {
   Ints a = 12;
   int:Signed8|int:Unsigned32 b = 12;

   io:println(-a); // @output -12
   io:println(-b); // @output -12
}

Test-Case: output
Description: Test unary negative expression for optional user-defined sub-types of integer built-in sub-types with
             no overflow scenarios.
Labels: DecimalNumber, int:Signed8, int:Unsigned32, module-type-defn, numeric-nil-lifting, optional-type, unary-minus, union-type

import ballerina/io;
type Ints int:Signed8|int:Unsigned32;

public function main() {
   Ints? a = 12;
   int:Signed8|int:Unsigned32? b = 12;

   io:println(-a); // @output -12
   io:println(-b); // @output -12
}

Test-Case: output
Description: Test unary negative expression for positive floats with no overflow scenarios.
Labels: DecimalFloatingPointNumber, float, unary-minus

import ballerina/io;
public function main() {
   float a = 1.0;
   float b = 101.5;
   float c = 0;
   float d = 922439289.0;

   io:println(-a); // @output -1.0
   io:println(-b); // @output -101.5
   io:println(-c); // @output -0.0
   io:println(-d); // @output -922439289.0
}

Test-Case: output
Description: Test unary negative expression for negative floats with no overflow scenarios.
Labels: DecimalFloatingPointNumber, float, unary-minus

import ballerina/io;
public function main() {
   float a = -1.0;
   float b = -101.5;
   float c = -922439289.0;
   io:println(-a); // @output 1.0
   io:println(-b); // @output 101.5
   io:println(-c); // @output 922439289.0
}

Test-Case: output
Description: Test unary negative expression for very large floating point number.
Labels: DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, unary-minus

import ballerina/io;
public function main() {
   float a = 1.0 / 0;
   float b = -a;
   io:println(b); // @output -Infinity
}

Test-Case: output
Description: Test unary negative expression for positive user-defined sub-types of float with
             no overflow scenarios.
Labels: DecimalFloatingPointNumber, module-type-defn, singleton-type, unary-minus, union-type

import ballerina/io;
type Floats -2.0|-1.0|0.0|1.0|2.0;

public function main() {
   Floats a = 1.0;
   Floats b = 2.0;
   Floats c = 0;

   io:println(-a); // @output -1.0
   io:println(-b); // @output -2.0
   io:println(-c); // @output -0.0
}

Test-Case: output
Description: Test unary negative expression for user-defined sub-types of float.
Labels: DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, module-const-decl, module-type-defn, singleton-type, unary-minus, union-type

import ballerina/io;
const float A = -10f;
const float B = -20f;

type Floats1 -2.0|-1.0|0f|1.0|2.0;

type Floats2 A|B;

type Floats3 Floats1|Floats2;

public function main() {
   Floats2 a = -10f;
   Floats3 b = -1.0;

   io:println(-a); // @output 10.0
   io:println(-b); // @output 1.0
}

Test-Case: output
Description: Test unary negative expression for positive decimals with no overflow scenarios.
Labels: decimal, DecimalFloatingPointNumber, unary-minus

import ballerina/io;
public function main() {
   decimal a = 1.0;
   decimal b = 101.5;
   decimal c = 0;
   decimal d = 922439289.0;
   io:println(-a); // @output -1.0
   io:println(-b); // @output -101.5
   io:println(-c); // @output 0
   io:println(-d); // @output -922439289.0
}

Test-Case: output
Description: Test unary negative expression for negative decimals with no overflow scenarios.
Labels: decimal, DecimalFloatingPointNumber, unary-minus

import ballerina/io;
public function main() {
   decimal a = -1.0;
   decimal b = -101.5;
   decimal c = 0;
   decimal d = -922439289.0;
   io:println(-a); // @output 1.0
   io:println(-b); // @output 101.5
   io:println(-c); // @output 0
   io:println(-d); // @output 922439289.0
}

Test-Case: output
Description: Test unary negative expression for positive user-defined sub-types of decimals with
             no overflow scenarios.
Labels: DecimalFloatingPointNumber, FloatingPointTypeSuffix, module-type-defn, singleton-type, unary-minus, union-type

import ballerina/io;
type Decimals -2.0d|-1.0d|0d|1.0d|2.0d;

public function main() {
   Decimals a = 1.0;
   Decimals b = 2.0;
   Decimals c = 0;

   io:println(-a); // @output -1.0
   io:println(-b); // @output -2.0
   io:println(-c); // @output 0
}

Test-Case: output
Description: Test unary negative expression for positive user-defined sub-types of decimals with
             no overflow scenarios.
Labels: decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, module-const-decl, module-type-defn, singleton-type, unary-minus, union-type

import ballerina/io;
const decimal A = -10d;
const decimal B = -20d;

type Decimals1 -2.0d|-1.0d|0d|1.0d|2.0d;

type Decimals2 A|B;

type Decimals3 Decimals1|Decimals2;

public function main() {
   Decimals2 a = -10;
   Decimals3 b = -1.0;

   io:println(-a); // @output 10
   io:println(-b); // @output 1.0
}

Test-Case: output
Description: Test unary negative expression for optional user-defined sub-types of float.
Labels: DecimalFloatingPointNumber, float, FloatingPointTypeSuffix, module-const-decl, module-type-defn, numeric-nil-lifting, optional-type, singleton-type, unary-minus, union-type

import ballerina/io;
const float A = -10f;
const float B = -20f;

type Floats1 -2.0|-1.0|0.0|1.0|2.0;

type Floats2 A|B;

type Floats3 Floats1|Floats2;

public function main() {
   Floats2? a = -10f;
   Floats3? b = -1.0;

   io:println(-a); // @output 10.0
   io:println(-b); // @output 1.0
}

Test-Case: output
Description: Test unary negative expression for positive optional user-defined sub-types of decimals with no overflow scenarios.
Labels: DecimalFloatingPointNumber, FloatingPointTypeSuffix, module-type-defn, numeric-nil-lifting, optional-type, singleton-type, unary-minus, union-type

import ballerina/io;
type Decimals -2.0d|-1.0d|0d|1.0d|2.0d;

public function main() {
   Decimals? a = 1.0;
   Decimals? b = 2.0;
   Decimals? c = 0;

   io:println(-a); // @output -1.0
   io:println(-b); // @output -2.0
   io:println(-c); // @output 0
}

Test-Case: output
Description: Test unary negative expression for positive user-defined sub-types of decimals with
             no overflow scenarios.
Labels: decimal, DecimalFloatingPointNumber, FloatingPointTypeSuffix, module-const-decl, module-type-defn, numeric-nil-lifting, optional-type, singleton-type, unary-minus, union-type

import ballerina/io;
const decimal A = -10d;
const decimal B = -20d;

type Decimals1 -2.0d|-1.0d|0d|1.0d|2.0d;

type Decimals2 A|B;

type Decimals3 Decimals1|Decimals2;

public function main() {
   Decimals2? a = -10;
   Decimals3? b = -1.0;

   io:println(-a); // @output 10
   io:println(-b); // @output 1.0
}

Test-Case: output
Description: Test field and member access as unary negation operands.
Labels: array-type, DecimalNumber, field-access-expr, int, list-constructor-expr, mapping-constructor-expr, member-access-expr, module-type-defn, record-type, unary-minus

import ballerina/io;
type Record record {
   int x;
};

public function main() {
   Record c = {x: 10};
   int[] d = [30, 40];
   int e = -d[0];
   int f = -c.x;
   io:println(e); // @output -30
   io:println(f); // @output -10
}

Test-Case: output
Description: Test function call as unary negation operand.
Labels: DecimalNumber, function-call-expr, int, unary-minus

import ballerina/io;
public function main() {
   int a = -getInt();
   io:println(a); // @output -5
}

function getInt() returns int {
   return 5;
}

Test-Case: output
Description: Test multiplicative and additive expression in unary negation operands.
Labels: additive-expr, DecimalNumber, int, multiplicative-expr, unary-minus

import ballerina/io;
public function main() {
   int a = -(1 + 49);
   int b = -(23 * 4);
   int c = -(100 / 4);
   int d = -(99 % 5);
   io:println(a); // @output -50
   io:println(b); // @output -92
   io:println(c); // @output -25
   io:println(d); // @output -4
}

Test-Case: output
Description: Test assignability result of unary negation expression to any.
Labels: any, DecimalNumber, int, unary-minus

import ballerina/io;
public function main() {
   int a = 5;
   any b = -a;
   io:println(b == -5); // @output true
}

Test-Case: output
Description: Test assignability result of unary negation expression to union type.
Labels: DecimalNumber, int, string, unary-minus, union-type

import ballerina/io;
public function main() {
   int a = 5;
   int|string b = -a;
   io:println(b == -5); // @output true
}

Test-Case: output
Description: Test type cast expression in integer unary minus operands.
Labels: DecimalNumber, int, type-cast-expr, unary-minus

import ballerina/io;
public function main() {
   int i = -<int> 6;
   io:println(i); // @output -6
}

Test-Case: output
Description: Test type cast expression in float unary minus operands.
Labels: DecimalNumber, float, type-cast-expr, unary-minus

import ballerina/io;
public function main() {
   float i = -<float> 6;
   io:println(i); // @output -6.0
}

Test-Case: output
Description: Test shift expressions as unary negative operands.
Labels: DecimalNumber, int, shift-expr, unary-minus

import ballerina/io;
public function main() {
   int p = -(1 << 2);
   io:println(p); // @output -4
}

Test-Case: output
Description: Test binary bitwise expressions as unary negative operands.
Labels: binary-bitwise-expr, DecimalNumber, int, unary-minus

import ballerina/io;
public function main() {
   int a = -(2 & 6);
   int b = -(2 ^ 6);
   io:println(a); // @output -2
   io:println(b); // @output -4
}

Test-Case: output
Description: Test static type of result is contextually expected type.
Labels: decimal, DecimalNumber, float, int, unary-minus

import ballerina/io;
public function main() {
   float a = -12;
   decimal b = -12;
   io:println(a); // @output -12.0
   io:println(b); // @output -12
}

Test-Case: output
Description: Test unary minus expression with singleton type operand.
Labels: DecimalNumber, singleton-type, unary-minus

import ballerina/io;
public function main() {
   -1 a = -1;
   io:println(a); // @output -1
}

Test-Case: error
Description: Test the static type of operands belonging to non-numeric basic types resulting in an error
           in unary expression.
Labels: anydata, string, unary-minus

function errorFunction(string a, anydata n) {
   string _ = -a; // @error '-' is not allowed with operands of non-numeric basic types
   int _ = -"12"; // @error '-' is not allowed with operands of non-numeric basic types
   _ = -n; // @error '-' is not allowed with operands of non-numeric basic types
}

Test-Case: error
Description: Test for optional type the static type of the result being the basic type of the operands via invalid assignment.
Labels: decimal, float, int, optional-type, unary-minus

function errorFunction(int? a, float? b, decimal? c) {
   int _ = -a; // @error incompatible types: expected 'int', found 'int?'
   float _ = -b; // @error incompatible types: expected 'float', found 'float?'
   decimal _ = -c; // @error incompatible types: expected 'decimal', found 'decimal?'
}

Test-Case: error
Description: Test the static type of the result being the basic type of the operands via invalid assignment,
            where operands are of types that are subtypes of int types.
Labels: byte, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16, int:Unsigned32, int:Unsigned8, module-type-defn, singleton-type, unary-minus

type Ints 1|2;

function errorFunction(int:Signed8 a, int:Signed16 b, int:Signed32 c,
                    int:Unsigned8 d, int:Unsigned16 e, int:Unsigned32 f,
                    byte g, Ints h) {
   int:Signed8 _ = -a; // @error static type of unary-minus expression with operands of int subtypes is int

   int:Signed16 _ = -b; // @error static type of unary-minus expression with operands of int subtypes is int

   int:Signed32 _ = -c; // @error static type of unary-minus expression with operands of int subtypes is int

   int:Unsigned8 _ = -d; // @error static type of unary-minus expression with operands of int subtypes is int

   int:Unsigned16 _ = -e; // @error static type of unary-minus expression with operands of int subtypes is int

   int:Unsigned32 _ = -f; // @error static type of unary-minus expression with operands of int subtypes is int

   byte _ = -g; // @error static type of unary-minus expression with operands of int subtypes is int

   Ints _ = -h; // @error static type of unary-minus expression with operands of int subtypes is int

   1 _ = -1;; // @error static type of unary-minus expression with operands of int subtypes is int
}

Test-Case: error
Description: Test the static type of the result being the basic type of the operands via invalid assignment,
            where operands are of types that are optional subtypes of int types.
Labels: byte, int, int:Signed16, int:Signed32, int:Signed8, int:Unsigned16, int:Unsigned32, int:Unsigned8, module-type-defn, optional-type, singleton-type, unary-minus

type Ints 1|2;

function errorFunction(int:Signed8? a, int:Signed16? b, int:Signed32? c,
                    int:Unsigned8? d, int:Unsigned16? e, int:Unsigned32? f,
                    byte? g, Ints? h) {
   int:Signed8? _ = -a; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

   int:Signed16? _ = -b; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

   int:Signed32? _ = -c; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

   int:Unsigned8? _ = -d; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

   int:Unsigned16? _ = -e; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

   int:Unsigned32? _ = -f; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

   byte? _ = -g; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

   Ints? _ = -h; // @error static type of unary-minus expression with operands of optional int subtypes is int optional

   1? _ = -1; // @error static type of unary-minus expression with operands of optional int subtypes is int optional
}
