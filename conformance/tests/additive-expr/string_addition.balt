Test-Case: error
Description: Test invalid concatenation with string.
Labels: additive-expr, string, int, nil-type, array-type

function errorFunction(string a, int b, () c, string[] d) {
    string _ = a + b; // @error cannot concatenate string and int
    string _ = a + c; // @error cannot concatenate string and nil
    string _ = a + d; // @error cannot concatenate string and array
    string _ = b + a + a; // @error cannot concatenate string and int
    string _ = c + a; // @error cannot concatenate string and nil
    string _ = d + a; // @error cannot concatenate string and array
}

Test-Case: error
Description: Test invalid static type of string concatenation.
Labels: additive-expr, string, int

function errorFunction(string a, string b) {
    int _ = a + b; // @error static type of string concatenation is string
    int _ = a + b + a; // @error static type of string concatenation is string
}

Test-Case: error
Description: Test invalid static type of string concatenation with string:Char.
Labels: additive-expr, string, int, string:Char

function errorFunction(string a, string:Char b) {
    int _ = a + b; // @error static type of string concatenation is string
    string:Char _ = b + b; // @error static type of string concatenation is string
    string:Char _ = b + a; // @error static type of string concatenation is string
    string:Char _ = b + a + a; // @error static type of string concatenation is string
}

Test-Case: error
Description: Test invalid static type of user-defined string subtype concatenation with string and string:Char.
Labels: additive-expr, string, int, string:Char, module-type-defn, union-type, singleton-type

type Strings "A"|"foo";
type Chars "A"|"B";

function errorFunction(string a, string:Char b, Strings c, Chars d) {
    Strings _ = a + c; // @error static type of string concatenation is string
    Strings _ = b + c; // @error static type of string concatenation is string
    string:Char _ = d + c; // @error static type of string concatenation is string
    int _ = c + a; // @error static type of string concatenation is string
    string:Char _i = c + b; // @error static type of string concatenation is string
    Strings _ = c + d; // @error static type of string concatenation is string
    Strings _ = c + c; // @error static type of string concatenation is string
    Chars _ = a + d; // @error static type of string concatenation is string
    Chars _ = b + d; // @error static type of string concatenation is string
    int _ = d + a; // @error static type of string concatenation is string
    string:Char _ = d + b; // @error static type of string concatenation is string
    Chars _ = d + d; // @error static type of string concatenation is string
    Chars _ = d + d + d; // @error static type of string concatenation is string
}

Test-Case: error
Description: Test invalid static type of string union concatenation.
Fail-Issue: ballerina-platform/ballerina-lang#33059
Labels: additive-expr, string, string:Char, module-type-defn, union-type, singleton-type

type Strings "A"|"foo";
type Chars "B"|"bar";

function errorFunction(string a, string:Char|Strings b, Strings|Chars c) {
    int _ = a + b; // @error static type of string concatenation is string
    int _ = a + b + a; // @error static type of string concatenation is string
    int _ = b + b; // @error static type of string concatenation is string
    int _ = a + c; // @error static type of string concatenation is string
    int _ = c + b; // @error static type of string concatenation is string
    int _ = c + c; // @error static type of string concatenation is string
}

Test-Case: error
Description: Test invalid optional string concatenation.
Labels: additive-expr, string, optional-type

function errorFunction(string? a, string? b, string c) {
    string _ = a + b; // @error cannot concatenate optional strings
    string? _ = a + b; // @error cannot concatenate optional strings
    string _ = a + c; // @error cannot concatenate string and optional string
    string _ = c + a + c; // @error cannot concatenate string and optional string
}

Test-Case: error
Description: Test invalid optional string:Char concatenation.
Labels: additive-expr, string, string:Char, optional-type

function errorFunction(string:Char? a, string:Char? b, string:Char c) {
    string:Char _ = a + b; // @error cannot concatenate optional strings
    string:Char? _ = a + b; // @error cannot concatenate optional strings
    string:Char _ = a + c; // @error cannot concatenate string and optional string
    string:Char _ = a + a + c + c; // @error cannot concatenate string and optional string
}

Test-Case: error
Description: Test invalid optional user-defined string type concatenation.
Labels: additive-expr, string, string:Char, optional-type

type Strings "a"|"bc";

function errorFunction(Strings? a, Strings? b, Strings c) {
    Strings _ = a + b; // @error cannot concatenate optional strings
    Strings? _ = a + b; // @error cannot concatenate optional strings
    Strings _ = a + c; // @error cannot concatenate string and optional string
    Strings _ = a + c + b; // @error cannot concatenate string and optional string
}

Test-Case: output
Description: Test concatenation of string with NumericEscape.
Labels: additive-expr, string, StringNumericEscape

import ballerina/io;
public function main() {
    string a = "a\u{0040}b";
    string b = "\u{1E41}";

    io:println(a + a); // @output a@ba@b
    io:println(a + b); // @output a@bṁ

    io:println(b + a); // @output ṁa@b
    io:println(b + b); // @output ṁṁ
}

Test-Case: output
Description: Test string concatenation when an operand is of a union type containing string:Char.
Fail-Issue: ballerina-platform/ballerina-lang#33059
Labels: additive-expr, string, string:Char, module-type-defn, union-type, singleton-type

import ballerina/io;
type Strings "A"|"foo";
type Chars "B"|"bar";

public function main() {
    string a = "str";
    string:Char|Strings b = "M";
    Strings|Chars c = "bar";
    string:Char d = "C";
    Strings e = "A";
    Chars f = "B";

    printString(a + b); // @output strM
    printString(b + a); // @output Mstr
    printString(b + b); // @output MM
    printString(b + c); // @output Mbar
    printString(b + d); // @output MC
    printString(b + e); // @output MA
    printString(b + f); // @output MB
    printString(c + b); // @output barM
    printString(d + b); // @output CM
    printString(e + b); // @output AM
    printString(f + b); // @output BM
}

function printString(string s) {
    io:println(s);
}

Test-Case: output
Description: Test string concatenation when an operand is of a union type.
Labels: additive-expr, string, string:Char, module-type-defn, union-type, singleton-type

import ballerina/io;
type Strings "A"|"foo";
type Chars "B"|"bar";

public function main() {
    string a = "str";
    Strings|Chars c = "bar";
    string:Char d = "C";
    Strings e = "A";
    Chars f = "B";

    printString(a + c); // @output strbar
    printString(a + d); // @output strC
    printString(a + e); // @output strA
    printString(a + f); // @output strB

    printString(c + a); // @output barstr
    printString(c + c); // @output barbar
    printString(c + d); // @output barC
    printString(c + e); // @output barA
    printString(c + f); // @output barB

    printString(d + a); // @output Cstr
    printString(d + c); // @output Cbar
    printString(d + d); // @output CC
    printString(d + e); // @output CA
    printString(d + f); // @output CB

    printString(e + a); // @output Astr
    printString(e + c); // @output Abar
    printString(e + d); // @output AC
    printString(e + e); // @output AA
    printString(e + f); // @output AB

    printString(f + a); // @output Bstr
    printString(f + c); // @output Bbar
    printString(f + d); // @output BC
    printString(f + e); // @output BA
    printString(f + f); // @output BB
}

function printString(string s) {
    io:println(s);
}

Test-Case: output
Description: Test string concatenation with additive expressions as operands.
Labels: additive-expr, string, module-type-defn, union-type, singleton-type, string:Char

import ballerina/io;
type Chars "H"|"I";

public function main() {
    Chars s = "H";
    string:Char t = "e";
    string u = "llo";
    string v = " from ballerina";
    string w = "!";

    string x = (s + t + u) + v + w;
    io:println(x); // @output Hello from ballerina!

    string y = s + t + u + v + w;
    io:println(y); // @output Hello from ballerina!

    string z = (s + t) + u + v + w;
    io:println(z); // @output Hello from ballerina!
}

