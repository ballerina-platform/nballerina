Test-Case: parser-error
Description: Test syntax errors in bitwise and expression.
Labels: binary-bitwise-expr, DecimalNumber

public function main() {
    int _ = & 434343; // @error missing LHS operand
    int _ = 34665677665 & ; // @error missing RHS operand
}

Test-Case: output
Description: Test basic bitwise and expression.
Labels: binary-bitwise-expr, DecimalNumber

import ballerina/io;
public function main() {
    io:println(9 & 6); // @output 0
    io:println(6 & 9); // @output 0
    io:println(99999999 & 6); // @output 6
    io:println(5 & 7568888); // @output 0
    io:println(54545 & 7568888); // @output 21776
    io:println(99943949334943 & 99943949334943); // @output 99943949334943

    io:println(9223372036854775807 & 9223372036854775807); // @output 9223372036854775807
    io:println(9223372036854775807 & 3); // @output 3
}

Test-Case: output
Description: Test basic bitwise and expression using HexIntLiteral.
Labels: binary-bitwise-expr, DecimalNumber, HexIntLiteral

import ballerina/io;
public function main() {
    io:println(0xAB55 & 0x0032); // @output 16
    io:println(0xABF5 & 50); // @output 48
    io:println(645 & 0xDBF5); // @output 645
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int using byte.
Labels: binary-bitwise-expr, byte, int

import ballerina/io;
public function main() {
    int a = 987996;
    byte b = 54;
    byte c = 99;

    io:println(a & b); // @output 20
    io:println(b & a); // @output 20
    io:println(b & c); // @output 34
    io:println(c & b); // @output 34
    io:println(c & c); // @output 99
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int using Unsigned32.
Labels: binary-bitwise-expr, int, int:Unsigned32

import ballerina/io;
public function main() {
    int a = 987996;
    int:Unsigned32 b = 54;
    int:Unsigned32 c = 5454545;

    io:println(a & b); // @output 20
    io:println(b & a); // @output 20
    io:println(b & c); // @output 16
    io:println(c & b); // @output 16
    io:println(c & c); // @output 5454545
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int using Unsigned16.
Labels: binary-bitwise-expr, int, int:Unsigned16

import ballerina/io;
public function main() {
    int a = 387953196;
    int:Unsigned16 b = 987;
    int:Unsigned16 c = 7764;

    io:println(a & b); // @output 520
    io:println(b & a); // @output 520
    io:println(b & c); // @output 592
    io:println(c & b); // @output 592
    io:println(c & c); // @output 7764
}

Test-Case: output
Description: Test bitwise and expression where the operands are a subtype of int using Unsigned8.
Labels: binary-bitwise-expr, int, int:Unsigned8

import ballerina/io;
public function main() {
    int a = 387953196;
    int:Unsigned8 b = 97;
    int:Unsigned8 c = 64;

    io:println(a & b); // @output 32
    io:println(b & a); // @output 32
    io:println(b & c); // @output 64
    io:println(c & b); // @output 64
    io:println(c & c); // @output 64
}

Test-Case: error
Description: Test the static type of both operands must be a subtype of int via invalid numeric operand types.
Labels: binary-bitwise-expr, DecimalNumber, DecimalFloatingPointNumber, float, FloatingPointTypeSuffix

function errorFunction() {
    float a = 5445.4;
    float b = 5445.4;

    int _ = 5 & 7.5; // @error static type of both operands must be a subtype of int

    int _ = 433.4 & 7.5; // @error static type of both operands must be a subtype of int

    int _ = 434.446e+2f & 95.446e+2f; // @error static type of both operands must be a subtype of int

    int _ = 433d & 7d; // @error static type of both operands must be a subtype of int

    int _ = a & b; // @error static type of both operands must be a subtype of int

    int _ = getFloat1() & getFloat2(); // @error static type of both operands must be a subtype of int
}

function getFloat1() returns float {
    return 99.4;
}

function getFloat2() returns float {
    return 43.8;
}

Test-Case: error
Description: Test the static type of both operands must be a subtype of int via invalid other operand types.
Labels: binary-bitwise-expr, list-constructor-expr, mapping-constructor-expr, map-type, nil-literal, string

function errorFunction() {
    map<int> a = {};
    map<int> b = {};

    int _ = () & (); // @error static type of both operands must be a subtype of int

    int _ = "5" & "6"; // @error static type of both operands must be a subtype of int

    int _ = [1] & [2]; // @error static type of both operands must be a subtype of int

    int _ = {name: "mike"} & {name: "Jone"}; // @error static type of both operands must be a subtype of int

    int _ = a & b; // @error static type of both operands must be a subtype of int
}

Test-Case: error
Description: Test error in bitwise and expression where the operands are user-defined type T where the T is not a 
             subtype of int.
Labels: binary-bitwise-expr, DecimalNumber, decimal, int, module-type-defn, union-type

type MyType int|decimal;

function errorFunction() {
    MyType a = 5;
    MyType b = 433;
    int c = 765;

    int _ = a & b; // @error MyType is not a subtype of int
    int _ = a & 12345; // @error MyType is not a subtype of int
    int _ = b & c; // @error MyType is not a subtype of int
    int _ = a & c; // @error MyType is not a subtype of int
}

Test-Case: output
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K with Unsigned32.
Labels: binary-bitwise-expr, int, int:Unsigned32

import ballerina/io;
public function main() {
    int a = 9876;
    int:Unsigned32 b = 5454;
    printResult(a & b); // @output 1028

    int:Unsigned32 c = 9994444;
    int:Unsigned32 d = 999999999;
    printResult(c & d); // @output 9994444
}

function printResult(int:Unsigned32 result) {
    io:println(result);
}

Test-Case: output
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K with Unsigned16.
Labels: binary-bitwise-expr, int, int:Unsigned16

import ballerina/io;
public function main() {
    int a = 33334567654;
    int:Unsigned16 b = 213;
    printResult(a & b); // @output 196

    int:Unsigned16 c = 43343;
    int:Unsigned16 d = 213;
    printResult(c & d); // @output 69
}

function printResult(int:Unsigned16 result) {
    io:println(result);
}

Test-Case: output
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K with Unsigned8.
Labels: binary-bitwise-expr, int, int:Unsigned8

import ballerina/io;
public function main() {
    int a = 987996;
    int:Unsigned8 b = 54;
    printResult(a & b); // @output 20

    int:Unsigned8 c = 94;
    int:Unsigned8 d = 99;
    printResult(c & d); // @output 66
}

function printResult(int:Unsigned8 result) {
    io:println(result);
}

Test-Case: output
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K.
Labels: binary-bitwise-expr, byte, int:Signed8, int:Signed16, int:Unsigned8, int:Unsigned16, int:Unsigned32

import ballerina/io;
public function main() {
    int:Unsigned32 b = 5454;
    int:Unsigned16 d = 4344;
    int:Unsigned16 e = b & d;
    io:println(e); // @output 4168

    int:Unsigned8 f = 44;
    int:Unsigned8 g = d & f;
    io:println(g); // @output 40

    int:Unsigned8 h = b & f;
    io:println(h); // @output 12

    byte i = f & g;
    io:println(i); // @output 40
    
    int:Signed8 j = 4;
    int:Unsigned32 k = 33;
    int:Unsigned32 m = j & k;
    io:println(m); // @output 0

    int:Signed16 n = -24;
    int:Unsigned32 p = 33;
    int:Unsigned32 q = n & p;
    io:println(q); // @output 32
}

Test-Case: output
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K when at least type of one operand is a 
             singleton.
Fail-Issue: ballerina-platform/ballerina-lang#35458
Labels: binary-bitwise-expr, byte, int:Unsigned8, int:Unsigned16, int:Unsigned32

import ballerina/io;
public function main() {
    int r = 5454;
    2 s = 2;
    int:Unsigned8 t = r & s;
    io:println(t); // @output 2

    256 u = 256;
    int:Unsigned16 v = r & u;
    io:println(v); // @output 256

    545444 w = 545444;
    int:Unsigned32 x = r & w;
    io:println(x); // @output 4100

    int:Unsigned16 y = s & u;
    io:println(y); // @output 0

    int:Unsigned32 z = s & w;
    io:println(z); // @output 0
}

Test-Case: error
Description: Test if the type of either operand is a subtype of int:UnsignedK when K is 8, 16 or 32, then the static
             type of the result is int:UnsignedN where N is the smallest such K using invalid assignment.
Labels: binary-bitwise-expr, byte, int, int:Signed8, int:Signed16, int:Unsigned8, int:Unsigned16, int:Unsigned32

function errorFunction() {
    int a = 4343;
    int b = 8;
    int:Unsigned32 _ = a & b; // @error the static type of the result is int

    int d = 9876;
    int:Unsigned32 e = 5454;
    int:Unsigned16 _ = d & e; // @error the static type of the result is Unsigned32

    int g = 9876;
    int:Unsigned16 h = 5454;
    int:Unsigned8 _ = g & h; // @error the static type of the result is Unsigned16

    byte _ = g & h; // @error the static type of the result is Unsigned16

    int:Signed8 k = 12;
    int:Signed16 m = 4434;
    int:Signed8 _ = k & m; // @error the static type of the result is int

    int:Unsigned16 n = 12;
    int:Unsigned16 p = 4434;
    int:Signed16 _ = n & p; // @error the static type of the result is Unsigned16

    int:Unsigned32 q = 12;
    int:Unsigned16 r = 4434;
    int:Unsigned8 _ = q & r; // @error the static type of the result is Unsigned16
}

Test-Case: output
Description: Test float literal as operands with type cast.
Labels: any, binary-bitwise-expr, DecimalFloatingPointNumber, int, float, type-cast-expr

import ballerina/io;
public function main() {
    float a = 4.6434;
    float b = 53;
    printResult(<int>a & <int>b); // @output 5

    int c = 54322;
    float d = 7.3;
    printResult(c & <int>d); // @output 2
    printResult(<int>d & c); // @output 2

    any e = 65.65;
    any f = 1235.465;
    printResult(<int> e & <int> f); // @output 66
    printResult(<int> a & <int> e); // @output 0
    printResult(<int> f & c); // @output 1042
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test member access expression as operands.
Labels: array-type, binary-bitwise-expr, int, list-constructor-expr, member-access-expr

import ballerina/io;
public function main() {
    int[] a = [33, 22, 535334343];

    printResult(a[0] & a[1]); // @output 0
    printResult(a[0] & a[2]); // @output 1
    printResult(a[1] & a[2]); // @output 6
    printResult(a[2] & a[2]); // @output 535334343
    printResult(a[2] & 0); // @output 0
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test function call expression as operands.
Labels: binary-bitwise-expr, function-call-expr, int

import ballerina/io;
public function main() {
    int a = getInt() & getInt();
    io:println(a); // @output 43

    int b = getInt() & getInt16();
    io:println(b); // @output 1

    int c = getInt() & getInt32();
    io:println(c); // @output 34

    int d = getInt16() & getInt32();
    io:println(d); // @output 256
}

function getInt() returns int {
    return 43;
}

function getInt32() returns int:Signed32 {
    return 44322;
}

function getInt16() returns int:Signed16 {
    return 897;
}

Test-Case: output
Description: Test multiplicative expression as operands.
Labels: binary-bitwise-expr, DecimalNumber, multiplicative-expr

import ballerina/io;
public function main() {
    printResult((54 * 5) & (534 * 2)); // @output 12
    printResult(54 * 5 & 534 * 2); // @output 12

    printResult((54 / 5) & (534 / 2)); // @output 10
    printResult(54 / 5 & 534 / 2); // @output 10

    printResult((54 % 5) & (534 % 2)); // @output 0
    printResult(54 % 5 & 534 % 2); // @output 0

    printResult(43 & 534 % 8); // @output 2
    printResult(43 & (534 % 8)); // @output 2

    printResult(54 % 5 & 534); // @output 4
    printResult((54 % 5) & 534); // @output 4
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test additive expression as operands.
Labels: additive-expr, DecimalNumber, binary-bitwise-expr

import ballerina/io;
public function main() {
    printResult((54 + 5) & (534 + 2)); // @output 24
    printResult(54 + 5 & 534 + 2); // @output 24

    printResult((54 - 5) & (534 - 2)); // @output 16
    printResult(54 - 5 & 534 - 2); // @output 16

    printResult(43 & 534 + 8); // @output 10
    printResult(43 & (534 + 8)); // @output 10

    printResult(54 - 5 & 534); // @output 16
    printResult((54 - 5) & 534); // @output 16
}

function printResult(int result) {
    io:println(result);
}

Test-Case: output
Description: Test bitwise expression as operands.
Labels: binary-bitwise-expr, DecimalNumber

import ballerina/io;
public function main() {
    printResult(54 & 5 & 534 & 2); // @output 0
    printResult(((54 & 1) & 534) & 2); // @output 0

    printResult(54 ^ 1 & 534 ^ 1); // @output 55
    printResult(54 ^ (1 & 534) ^ 1); // @output 55

    printResult(767 | 1 & 934 | 1); // @output 767
    printResult(767 | (1 & 934) | 1); // @output 767

    printResult(43 & 534 & 2); // @output 2
    printResult((43 & 534) & 2); // @output 2

    printResult(54 | 5 & 534); // @output 54
    printResult(54 | (5 & 534)); // @output 54

    printResult(4341 | 1 & 234 ^ 1); // @output 4341
    printResult(4341 | ((1 & 234) ^ 1)); // @output 4341
}

function printResult(int result) {
    io:println(result);
}

